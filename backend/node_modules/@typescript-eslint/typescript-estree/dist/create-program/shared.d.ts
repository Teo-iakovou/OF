<<<<<<< HEAD
import type { Program } from 'typescript';
import * as ts from 'typescript';
import type { ParseSettings } from '../parseSettings';
interface ASTAndNoProgram {
    ast: ts.SourceFile;
    program: null;
}
interface ASTAndDefiniteProgram {
    ast: ts.SourceFile;
    program: ts.Program;
}
type ASTAndProgram = ASTAndDefiniteProgram | ASTAndNoProgram;
=======
import * as ts from 'typescript';
import { Program } from 'typescript';
import { Extra, ModuleResolver } from '../parser-options';
interface ASTAndProgram {
    ast: ts.SourceFile;
    program: ts.Program;
}
>>>>>>> packages
/**
 * Compiler options required to avoid critical functionality issues
 */
declare const CORE_COMPILER_OPTIONS: ts.CompilerOptions;
<<<<<<< HEAD
declare const DEFAULT_EXTRA_FILE_EXTENSIONS: Set<string>;
declare function createDefaultCompilerOptionsFromExtra(parseSettings: ParseSettings): ts.CompilerOptions;
type CanonicalPath = {
    __brand: unknown;
} & string;
declare function getCanonicalFileName(filePath: string): CanonicalPath;
declare function ensureAbsolutePath(p: string, tsconfigRootDir: string): string;
declare function canonicalDirname(p: CanonicalPath): CanonicalPath;
declare function getAstFromProgram(currentProgram: Program, filePath: string): ASTAndDefiniteProgram | undefined;
/**
 * Hash content for compare content.
 * @param content hashed contend
 * @returns hashed result
 */
declare function createHash(content: string): string;
export { type ASTAndDefiniteProgram, type ASTAndNoProgram, type ASTAndProgram, canonicalDirname, type CanonicalPath, CORE_COMPILER_OPTIONS, createDefaultCompilerOptionsFromExtra, createHash, DEFAULT_EXTRA_FILE_EXTENSIONS, ensureAbsolutePath, getAstFromProgram, getCanonicalFileName, };
=======
declare function createDefaultCompilerOptionsFromExtra(extra: Extra): ts.CompilerOptions;
declare type CanonicalPath = string & {
    __brand: unknown;
};
declare function getCanonicalFileName(filePath: string): CanonicalPath;
declare function ensureAbsolutePath(p: string, extra: Extra): string;
declare function canonicalDirname(p: CanonicalPath): CanonicalPath;
declare function getScriptKind(extra: Extra, filePath?: string): ts.ScriptKind;
declare function getAstFromProgram(currentProgram: Program, extra: Extra): ASTAndProgram | undefined;
declare function getModuleResolver(moduleResolverPath: string): ModuleResolver;
export { ASTAndProgram, CORE_COMPILER_OPTIONS, canonicalDirname, CanonicalPath, createDefaultCompilerOptionsFromExtra, ensureAbsolutePath, getCanonicalFileName, getScriptKind, getAstFromProgram, getModuleResolver, };
>>>>>>> packages
//# sourceMappingURL=shared.d.ts.map