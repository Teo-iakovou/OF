"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/ai-chat/page",{

/***/ "(app-pages-browser)/./src/app/utils/api.ts":
/*!******************************!*\
  !*** ./src/app/utils/api.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeImageMultipart: function() { return /* binding */ analyzeImageMultipart; },\n/* harmony export */   checkUserPackage: function() { return /* binding */ checkUserPackage; },\n/* harmony export */   clearApiCaches: function() { return /* binding */ clearApiCaches; },\n/* harmony export */   coachChat: function() { return /* binding */ coachChat; },\n/* harmony export */   createEmptyConversation: function() { return /* binding */ createEmptyConversation; },\n/* harmony export */   deleteAnalysisResult: function() { return /* binding */ deleteAnalysisResult; },\n/* harmony export */   deleteConversation: function() { return /* binding */ deleteConversation; },\n/* harmony export */   fetchAnalysisHistory: function() { return /* binding */ fetchAnalysisHistory; },\n/* harmony export */   fetchCoachChatPrompts: function() { return /* binding */ fetchCoachChatPrompts; },\n/* harmony export */   fetchConversation: function() { return /* binding */ fetchConversation; },\n/* harmony export */   fetchConversations: function() { return /* binding */ fetchConversations; },\n/* harmony export */   generateConversationTitle: function() { return /* binding */ generateConversationTitle; },\n/* harmony export */   getAnalysisById: function() { return /* binding */ getAnalysisById; },\n/* harmony export */   getRenderJob: function() { return /* binding */ getRenderJob; },\n/* harmony export */   purchasePackage: function() { return /* binding */ purchasePackage; },\n/* harmony export */   renderGenerate: function() { return /* binding */ renderGenerate; },\n/* harmony export */   sendFeedback: function() { return /* binding */ sendFeedback; },\n/* harmony export */   startCheckout: function() { return /* binding */ startCheckout; },\n/* harmony export */   ttsSynthesize: function() { return /* binding */ ttsSynthesize; },\n/* harmony export */   updateAnalysisById: function() { return /* binding */ updateAnalysisById; },\n/* harmony export */   verifySession: function() { return /* binding */ verifySession; }\n/* harmony export */ });\n/* harmony import */ var _app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/app/utils/fetcher */ \"(app-pages-browser)/./src/app/utils/fetcher.ts\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n// src/app/utils/api.ts\n\n// -------------------------------\n// Small helpers\n// -------------------------------\nasync function readJsonOrText(res) {\n    const text = await res.text();\n    try {\n        return {\n            ok: res.ok,\n            status: res.status,\n            data: JSON.parse(text)\n        };\n    } catch (e) {\n        return {\n            ok: res.ok,\n            status: res.status,\n            data: text\n        };\n    }\n}\nfunction ensureOk(r, what) {\n    if (!r.ok) {\n        const msg = typeof r.data === \"string\" ? r.data : JSON.stringify(r.data, null, 2);\n        throw new Error(\"\".concat(what, \" failed (\").concat(r.status, \") - \").concat(msg));\n    }\n    return r.data;\n}\n// -------------------------------\n/** Analysis history */ async function fetchAnalysisHistory() {\n    let page = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 10;\n    const url = \"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/analyze?page=\").concat(page, \"&limit=\").concat(limit, \"&ts=\").concat(Date.now());\n    const r = await (0,_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.fetchJson)(url, {\n        method: \"GET\",\n        cache: \"no-store\"\n    });\n    if (!r.ok) throw new Error(\"Fetch analysis history failed\");\n    return r.data;\n}\nasync function deleteAnalysisResult(id) {\n    const res = await fetch(\"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/analyze/\").concat(id), {\n        method: \"DELETE\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    });\n    const parsed = await readJsonOrText(res);\n    return ensureOk(parsed, \"Delete analysis result\");\n}\n// -------------------------------\n/** Stripe (unchanged) */ async function startCheckout(packageId) {\n    const USE_BFF = process.env.NEXT_PUBLIC_USE_BFF === \"true\";\n    const url = USE_BFF ? \"/api/checkout/create-checkout-session\" : \"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/checkout/create-checkout-session\");\n    const res = await fetch(url, {\n        method: \"POST\",\n        credentials: \"include\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            packageId\n        })\n    });\n    const { ok, data } = await readJsonOrText(res);\n    if (!ok) throw new Error(typeof data === \"string\" ? data : (data === null || data === void 0 ? void 0 : data.error) || \"Failed to start checkout\");\n    if (!(data === null || data === void 0 ? void 0 : data.url)) throw new Error(\"No checkout URL returned\");\n    window.location.href = data.url;\n}\nasync function verifySession(sessionId) {\n    const USE_BFF = process.env.NEXT_PUBLIC_USE_BFF === \"true\";\n    const base = USE_BFF ? \"\" : _app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL;\n    const res = await fetch(\"\".concat(base, \"/api/checkout/verify-session?session_id=\").concat(encodeURIComponent(sessionId)));\n    const parsed = await readJsonOrText(res);\n    return ensureOk(parsed, \"Verify session\");\n}\nasync function purchasePackage(packageId) {\n    const USE_BFF = process.env.NEXT_PUBLIC_USE_BFF === \"true\";\n    const url = USE_BFF ? \"/api/user/purchase\" : \"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/user/purchase\");\n    const res = await fetch(url, {\n        method: \"POST\",\n        credentials: \"include\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            packageId\n        })\n    });\n    const parsed = await readJsonOrText(res);\n    return ensureOk(parsed, \"Purchase package\");\n}\nfunction isUnauthorizedError(e) {\n    if (typeof e !== \"object\" || e === null) return false;\n    const maybe = e;\n    return typeof maybe.status === \"number\" && maybe.status === 401 || typeof maybe.message === \"string\" && maybe.message === \"Unauthorized\";\n}\nasync function checkUserPackage() {\n    // Simple in-memory cache to avoid duplicate calls from StrictMode double effects\n    // and from multiple components on the same view. Stale after 5 seconds.\n    const now = Date.now();\n    const TTL = 5000;\n    if (pkgCache.value !== undefined && now - pkgCache.ts < TTL) {\n        return pkgCache.value;\n    }\n    if (pkgCache.inFlight) return pkgCache.inFlight;\n    pkgCache.inFlight = (async ()=>{\n        try {\n            const r = await (0,_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.fetchJson)(\"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/user/check-package\"), {\n                method: \"GET\",\n                cache: \"no-store\"\n            });\n            if (!r.ok) throw new Error(\"Check user package failed\");\n            const val = r.data;\n            pkgCache.value = val;\n            pkgCache.ts = Date.now();\n            return val;\n        } catch (e) {\n            // Do NOT cache unauthorized; let callers retry after auth settles\n            if (isUnauthorizedError(e)) {\n                return {\n                    hasAccess: false\n                };\n            }\n            throw e;\n        } finally{\n            pkgCache.inFlight = null;\n        }\n    })();\n    return pkgCache.inFlight;\n}\n// Package cache (module scope)\nconst pkgCache = {\n    value: undefined,\n    ts: 0,\n    inFlight: null\n};\n// Public helper to clear API client caches (call on logout)\nfunction clearApiCaches() {\n    pkgCache.value = undefined;\n    pkgCache.ts = 0;\n    pkgCache.inFlight = null;\n}\n// -------------------------------\n// Talking Head (render) stubs\n// -------------------------------\nasync function renderGenerate(input) {\n    const r = await (0,_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.fetchJson)(\"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/render/generate\"), {\n        method: \"POST\",\n        body: JSON.stringify(input)\n    });\n    if (!r.ok) throw new Error(\"Failed to create render job\");\n    return r.data;\n}\nasync function getRenderJob(jobId) {\n    const r = await (0,_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.fetchJson)(\"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/render/jobs/\").concat(encodeURIComponent(jobId)), {\n        method: \"GET\"\n    });\n    if (!r.ok) throw new Error(\"Failed to fetch job status\");\n    return r.data;\n}\n// -------------------------------\n/** Coach chat + conversations */ async function coachChat(param) {\n    let { question, latestContentInfo, conversationId, title } = param;\n    try {\n        const res = await fetch(\"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/coach-chat\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            credentials: \"include\",\n            body: JSON.stringify({\n                question,\n                latestContentInfo,\n                conversationId,\n                title\n            })\n        });\n        const parsed = await readJsonOrText(res);\n        if (res.status === 200) return {\n            status: 200,\n            data: parsed.data\n        };\n        if (res.status === 402) return {\n            status: 402,\n            data: parsed.data\n        };\n        if (res.status === 429) return {\n            status: 429,\n            data: parsed.data\n        };\n        return {\n            status: res.status,\n            data: parsed.data\n        };\n    } catch (e) {\n        return {\n            status: 0,\n            data: {\n                error: \"Network error\"\n            }\n        };\n    }\n}\nasync function fetchConversation(id) {\n    const res = await fetch(\"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/conversations/\").concat(id), {\n        method: \"GET\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\",\n        cache: \"no-store\"\n    });\n    const parsed = await readJsonOrText(res);\n    return ensureOk(parsed, \"Fetch conversation\");\n}\nasync function deleteConversation(conversationId) {\n    const res = await fetch(\"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/conversations/\").concat(conversationId), {\n        method: \"DELETE\",\n        credentials: \"include\"\n    });\n    const parsed = await readJsonOrText(res);\n    return ensureOk(parsed, \"Delete conversation\");\n}\nasync function createEmptyConversation() {\n    try {\n        const res = await fetch(\"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/conversations\"), {\n            method: \"POST\",\n            credentials: \"include\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({})\n        });\n        const parsed = await readJsonOrText(res);\n        const data = ensureOk(parsed, \"Create conversation\");\n        var _data__id, _ref;\n        return (_ref = (_data__id = data._id) !== null && _data__id !== void 0 ? _data__id : data.id) !== null && _ref !== void 0 ? _ref : null;\n    } catch (error) {\n        console.error(\"Error creating new conversation:\", error);\n        return null;\n    }\n}\nasync function generateConversationTitle(conversationId, firstUserMessage) {\n    const res = await fetch(\"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/conversations/\").concat(conversationId, \"/generate-title\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\",\n        body: JSON.stringify({\n            firstUserMessage\n        }),\n        cache: \"no-store\"\n    });\n    const parsed = await readJsonOrText(res);\n    const data = ensureOk(parsed, \"Generate title\");\n    return data.title || null;\n}\nasync function fetchConversations() {\n    const url = \"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/conversations?ts=\").concat(Date.now());\n    const r = await (0,_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.fetchJson)(url, {\n        method: \"GET\",\n        cache: \"no-store\"\n    });\n    if (!r.ok) throw new Error(\"Fetch conversations failed\");\n    return r.data;\n}\n// -------------------------------\n/** Feedback */ async function sendFeedback(message) {\n    const res = await fetch(\"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/feedback\"), {\n        method: \"POST\",\n        credentials: \"include\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            message\n        })\n    });\n    const parsed = await readJsonOrText(res);\n    if (!parsed.ok) {\n        var _parsed_data;\n        throw new Error(typeof parsed.data === \"string\" ? parsed.data : ((_parsed_data = parsed.data) === null || _parsed_data === void 0 ? void 0 : _parsed_data.error) || \"Failed to send feedback (\".concat(parsed.status, \")\"));\n    }\n    return parsed.data;\n}\nfunction analyzeImageMultipart(opts) {\n    const { file, goal, linkBase, onProgress, captions = true, signal } = opts;\n    const form = new FormData();\n    form.append(\"image\", file);\n    if (goal) form.append(\"goal\", goal);\n    if (linkBase) form.append(\"linkBase\", linkBase);\n    // Include browser timezone so backend returns local windows\n    try {\n        const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n        if (timezone) form.append(\"timezone\", timezone);\n    } catch (e) {}\n    const url = \"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/analyze\") + (captions === false ? \"?captions=false\" : \"\");\n    return new Promise((resolve, reject)=>{\n        const xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", url, true);\n        xhr.withCredentials = true;\n        xhr.onreadystatechange = ()=>{\n            if (xhr.readyState !== 4) return;\n            if (xhr.status >= 200 && xhr.status < 300) {\n                try {\n                    const json = JSON.parse(xhr.responseText);\n                    resolve(json);\n                } catch (e) {\n                    reject(new Error(\"Invalid JSON from server.\"));\n                }\n            } else {\n                try {\n                    const err = JSON.parse(xhr.responseText);\n                    reject(new Error((err === null || err === void 0 ? void 0 : err.error) || \"Upload failed (\".concat(xhr.status, \")\")));\n                } catch (e) {\n                    reject(new Error(\"Upload failed (\".concat(xhr.status, \")\")));\n                }\n            }\n        };\n        if (xhr.upload && typeof onProgress === \"function\") {\n            xhr.upload.onprogress = (evt)=>{\n                if (!evt.lengthComputable) return;\n                onProgress(Math.round(evt.loaded / evt.total * 100));\n            };\n        }\n        xhr.onerror = ()=>reject(new Error(\"Network error\"));\n        // Support external abort via AbortController\n        let aborted = false;\n        const onAbort = ()=>{\n            aborted = true;\n            try {\n                xhr.abort();\n            } catch (e) {}\n            reject(new DOMException(\"Aborted\", \"AbortError\"));\n        };\n        if (signal) {\n            if (signal.aborted) return onAbort();\n            signal.addEventListener(\"abort\", onAbort, {\n                once: true\n            });\n        }\n        xhr.send(form);\n        // Cleanup abort listener when promise settles\n        const cleanup = ()=>{\n            if (signal) signal.removeEventListener(\"abort\", onAbort);\n        };\n        xhr.onloadend = ()=>{\n            if (!aborted) cleanup();\n        };\n    });\n}\nasync function getAnalysisById(id) {\n    const res = await fetch(\"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/analyze/\").concat(id), {\n        cache: \"no-store\"\n    });\n    const parsed = await readJsonOrText(res);\n    return ensureOk(parsed, \"Fetch result by id\");\n}\nasync function updateAnalysisById(id, patch) {\n    const res = await fetch(\"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/analyze/\").concat(id), {\n        method: \"PATCH\",\n        credentials: \"include\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(patch)\n    });\n    const parsed = await readJsonOrText(res);\n    return ensureOk(parsed, \"Update analysis\");\n}\n// --- Quick Prompts API ---\nasync function fetchCoachChatPrompts() {\n    const url = \"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/coach-chat/prompts?ts=\").concat(Date.now());\n    const r = await (0,_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.fetchJson)(url, {\n        method: \"GET\",\n        cache: \"no-store\"\n    });\n    if (!r.ok) throw new Error(\"Fetch coach prompts failed\");\n    return r.data;\n}\n// -------------------------------\n/** Text-to-Speech (ElevenLabs passthrough) */ async function ttsSynthesize(text) {\n    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const params = new URLSearchParams({\n        text\n    });\n    if (opts.voiceId) params.set(\"voiceId\", opts.voiceId);\n    if (opts.format) params.set(\"format\", opts.format);\n    params.set(\"ts\", String(Date.now()));\n    return \"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/tts?\").concat(params.toString());\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvdXRpbHMvYXBpLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsdUJBQXVCO0FBRW1DO0FBRTFELGtDQUFrQztBQUNsQyxnQkFBZ0I7QUFDaEIsa0NBQWtDO0FBQ2xDLGVBQWVFLGVBQWVDLEdBQWE7SUFDekMsTUFBTUMsT0FBTyxNQUFNRCxJQUFJQyxJQUFJO0lBQzNCLElBQUk7UUFDRixPQUFPO1lBQUVDLElBQUlGLElBQUlFLEVBQUU7WUFBRUMsUUFBUUgsSUFBSUcsTUFBTTtZQUFFQyxNQUFNQyxLQUFLQyxLQUFLLENBQUNMO1FBQU07SUFDbEUsRUFBRSxVQUFNO1FBQ04sT0FBTztZQUFFQyxJQUFJRixJQUFJRSxFQUFFO1lBQUVDLFFBQVFILElBQUlHLE1BQU07WUFBRUMsTUFBTUg7UUFBSztJQUN0RDtBQUNGO0FBRUEsU0FBU00sU0FDUEMsQ0FBaUQsRUFDakRDLElBQVk7SUFFWixJQUFJLENBQUNELEVBQUVOLEVBQUUsRUFBRTtRQUNULE1BQU1RLE1BQ0osT0FBT0YsRUFBRUosSUFBSSxLQUFLLFdBQVdJLEVBQUVKLElBQUksR0FBR0MsS0FBS00sU0FBUyxDQUFDSCxFQUFFSixJQUFJLEVBQUUsTUFBTTtRQUNyRSxNQUFNLElBQUlRLE1BQU0sR0FBbUJKLE9BQWhCQyxNQUFLLGFBQTBCQyxPQUFmRixFQUFFTCxNQUFNLEVBQUMsUUFBVSxPQUFKTztJQUNwRDtJQUNBLE9BQU9GLEVBQUVKLElBQUk7QUFDZjtBQUVBLGtDQUFrQztBQUNsQyxxQkFBcUIsR0FDZCxlQUFlUztRQUFxQkMsT0FBQUEsaUVBQU8sR0FBR0MsUUFBQUEsaUVBQVE7SUFDM0QsTUFBTUMsTUFBTSxHQUFnQ0YsT0FBN0JqQix3REFBUUEsRUFBQyxzQkFBa0NrQixPQUFkRCxNQUFLLFdBQXFCRyxPQUFaRixPQUFNLFFBQWlCLE9BQVhFLEtBQUtDLEdBQUc7SUFDOUUsTUFBTVYsSUFBSSxNQUFNViw2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SUFFdEQsTUFBTW1ELFNBQVMsSUFBSUMsZ0JBQWdCO1FBQUUvSDtJQUFLO0lBQzFDLElBQUkyRSxLQUFLcUQsT0FBTyxFQUFFRixPQUFPRyxHQUFHLENBQUMsV0FBV3RELEtBQUtxRCxPQUFPO0lBQ3BELElBQUlyRCxLQUFLdUQsTUFBTSxFQUFFSixPQUFPRyxHQUFHLENBQUMsVUFBVXRELEtBQUt1RCxNQUFNO0lBQ2pESixPQUFPRyxHQUFHLENBQUMsTUFBTUUsT0FBT25ILEtBQUtDLEdBQUc7SUFDaEMsT0FBTyxHQUF1QjZHLE9BQXBCbEksd0RBQVFBLEVBQUMsYUFBNkIsT0FBbEJrSSxPQUFPTSxRQUFRO0FBQy9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9hcHAvdXRpbHMvYXBpLnRzPzkzNzMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2FwcC91dGlscy9hcGkudHNcclxuaW1wb3J0IHR5cGUgeyBSZXN1bHREb2MgfSBmcm9tIFwiQC9hcHAvdHlwZXMvYW5hbHlzaXNcIjtcbmltcG9ydCB7IEJBU0VfVVJMLCBmZXRjaEpzb24gfSBmcm9tIFwiQC9hcHAvdXRpbHMvZmV0Y2hlclwiO1xuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gU21hbGwgaGVscGVyc1xyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbmFzeW5jIGZ1bmN0aW9uIHJlYWRKc29uT3JUZXh0KHJlczogUmVzcG9uc2UpIHtcbiAgY29uc3QgdGV4dCA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHsgb2s6IHJlcy5vaywgc3RhdHVzOiByZXMuc3RhdHVzLCBkYXRhOiBKU09OLnBhcnNlKHRleHQpIH07XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiB7IG9rOiByZXMub2ssIHN0YXR1czogcmVzLnN0YXR1cywgZGF0YTogdGV4dCB9O1xuICB9XG59XG5cclxuZnVuY3Rpb24gZW5zdXJlT2s8VCA9IHVua25vd24+KFxyXG4gIHI6IHsgb2s6IGJvb2xlYW47IHN0YXR1czogbnVtYmVyOyBkYXRhOiB1bmtub3duIH0sXHJcbiAgd2hhdDogc3RyaW5nXHJcbik6IFQge1xyXG4gIGlmICghci5vaykge1xyXG4gICAgY29uc3QgbXNnID1cclxuICAgICAgdHlwZW9mIHIuZGF0YSA9PT0gXCJzdHJpbmdcIiA/IHIuZGF0YSA6IEpTT04uc3RyaW5naWZ5KHIuZGF0YSwgbnVsbCwgMik7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7d2hhdH0gZmFpbGVkICgke3Iuc3RhdHVzfSkgLSAke21zZ31gKTtcclxuICB9XHJcbiAgcmV0dXJuIHIuZGF0YSBhcyBUO1xyXG59XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8qKiBBbmFseXNpcyBoaXN0b3J5ICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmZXRjaEFuYWx5c2lzSGlzdG9yeShwYWdlID0gMSwgbGltaXQgPSAxMCk6IFByb21pc2U8eyByZXN1bHRzOiBSZXN1bHREb2NbXTsgdG90YWw6IG51bWJlciB9PiB7XG4gIGNvbnN0IHVybCA9IGAke0JBU0VfVVJMfS9hcGkvYW5hbHl6ZT9wYWdlPSR7cGFnZX0mbGltaXQ9JHtsaW1pdH0mdHM9JHtEYXRlLm5vdygpfWA7XG4gIGNvbnN0IHIgPSBhd2FpdCBmZXRjaEpzb24odXJsLCB7IG1ldGhvZDogXCJHRVRcIiwgY2FjaGU6IFwibm8tc3RvcmVcIiB9KTtcbiAgaWYgKCFyLm9rKSB0aHJvdyBuZXcgRXJyb3IoXCJGZXRjaCBhbmFseXNpcyBoaXN0b3J5IGZhaWxlZFwiKTtcbiAgcmV0dXJuIHIuZGF0YSBhcyB7IHJlc3VsdHM6IFJlc3VsdERvY1tdOyB0b3RhbDogbnVtYmVyIH07XG59XG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUFuYWx5c2lzUmVzdWx0KGlkOiBzdHJpbmcpIHtcclxuICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgJHtCQVNFX1VSTH0vYXBpL2FuYWx5emUvJHtpZH1gLCB7XHJcbiAgICBtZXRob2Q6IFwiREVMRVRFXCIsXHJcbiAgICBoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXHJcbiAgfSk7XHJcbiAgY29uc3QgcGFyc2VkID0gYXdhaXQgcmVhZEpzb25PclRleHQocmVzKTtcclxuICByZXR1cm4gZW5zdXJlT2s8eyBtZXNzYWdlOiBzdHJpbmcgfT4ocGFyc2VkLCBcIkRlbGV0ZSBhbmFseXNpcyByZXN1bHRcIik7XHJcbn1cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLyoqIFN0cmlwZSAodW5jaGFuZ2VkKSAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RhcnRDaGVja291dChwYWNrYWdlSWQ6IHN0cmluZykge1xuICBjb25zdCBVU0VfQkZGID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfVVNFX0JGRiA9PT0gJ3RydWUnO1xuICBjb25zdCB1cmwgPSBVU0VfQkZGID8gYC9hcGkvY2hlY2tvdXQvY3JlYXRlLWNoZWNrb3V0LXNlc3Npb25gIDogYCR7QkFTRV9VUkx9L2FwaS9jaGVja291dC9jcmVhdGUtY2hlY2tvdXQtc2Vzc2lvbmA7XG4gIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKHVybCwge1xuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgY3JlZGVudGlhbHM6IFwiaW5jbHVkZVwiLFxuICAgIGhlYWRlcnM6IHsgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIgfSxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IHBhY2thZ2VJZCB9KSxcbiAgfSk7XG4gIGNvbnN0IHsgb2ssIGRhdGEgfSA9IGF3YWl0IHJlYWRKc29uT3JUZXh0KHJlcyk7XHJcbiAgaWYgKCFvaylcclxuICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgPyBkYXRhIDogZGF0YT8uZXJyb3IgfHwgXCJGYWlsZWQgdG8gc3RhcnQgY2hlY2tvdXRcIlxyXG4gICAgKTtcclxuICBpZiAoIWRhdGE/LnVybCkgdGhyb3cgbmV3IEVycm9yKFwiTm8gY2hlY2tvdXQgVVJMIHJldHVybmVkXCIpO1xyXG4gIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gZGF0YS51cmw7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB2ZXJpZnlTZXNzaW9uKHNlc3Npb25JZDogc3RyaW5nKSB7XG4gIGNvbnN0IFVTRV9CRkYgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19VU0VfQkZGID09PSAndHJ1ZSc7XG4gIGNvbnN0IGJhc2UgPSBVU0VfQkZGID8gJycgOiBCQVNFX1VSTDtcbiAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goXG4gICAgYCR7YmFzZX0vYXBpL2NoZWNrb3V0L3ZlcmlmeS1zZXNzaW9uP3Nlc3Npb25faWQ9JHtlbmNvZGVVUklDb21wb25lbnQoc2Vzc2lvbklkKX1gXG4gICk7XG4gIGNvbnN0IHBhcnNlZCA9IGF3YWl0IHJlYWRKc29uT3JUZXh0KHJlcyk7XG4gIHJldHVybiBlbnN1cmVPazx7IHN0YXR1czogc3RyaW5nOyBlbWFpbD86IHN0cmluZzsgcGFja2FnZUlkPzogc3RyaW5nIH0+KFxuICAgIHBhcnNlZCxcbiAgICBcIlZlcmlmeSBzZXNzaW9uXCJcbiAgKTtcbn1cblxyXG5leHBvcnQgdHlwZSBQdXJjaGFzZVJlc3BvbnNlID0geyBtZXNzYWdlOiBzdHJpbmcgfTtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwdXJjaGFzZVBhY2thZ2UocGFja2FnZUlkOiBzdHJpbmcpIHtcbiAgY29uc3QgVVNFX0JGRiA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1VTRV9CRkYgPT09ICd0cnVlJztcbiAgY29uc3QgdXJsID0gVVNFX0JGRiA/IGAvYXBpL3VzZXIvcHVyY2hhc2VgIDogYCR7QkFTRV9VUkx9L2FwaS91c2VyL3B1cmNoYXNlYDtcbiAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2godXJsLCB7XG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBjcmVkZW50aWFsczogXCJpbmNsdWRlXCIsXG4gICAgaGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgcGFja2FnZUlkIH0pLFxuICB9KTtcbiAgY29uc3QgcGFyc2VkID0gYXdhaXQgcmVhZEpzb25PclRleHQocmVzKTtcbiAgcmV0dXJuIGVuc3VyZU9rPFB1cmNoYXNlUmVzcG9uc2U+KHBhcnNlZCwgXCJQdXJjaGFzZSBwYWNrYWdlXCIpO1xufVxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLyoqIFVzZXIvcGFja2FnZSAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFVzZXJQYWNrYWdlUmVzcG9uc2Uge1xyXG4gIGhhc0FjY2VzczogYm9vbGVhbjtcclxuICBwYWNrYWdlPzogc3RyaW5nO1xyXG4gIHVwbG9hZHNSZW1haW5pbmc/OiBudW1iZXI7XHJcbiAgZXhwaXJlc0F0Pzogc3RyaW5nO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc1VuYXV0aG9yaXplZEVycm9yKGU6IHVua25vd24pOiBlIGlzIHsgc3RhdHVzPzogbnVtYmVyOyBtZXNzYWdlPzogc3RyaW5nIH0ge1xuICBpZiAodHlwZW9mIGUgIT09IFwib2JqZWN0XCIgfHwgZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBtYXliZSA9IGUgYXMgeyBzdGF0dXM/OiB1bmtub3duOyBtZXNzYWdlPzogdW5rbm93biB9O1xuICByZXR1cm4gKFxuICAgICh0eXBlb2YgbWF5YmUuc3RhdHVzID09PSBcIm51bWJlclwiICYmIG1heWJlLnN0YXR1cyA9PT0gNDAxKSB8fFxuICAgICh0eXBlb2YgbWF5YmUubWVzc2FnZSA9PT0gXCJzdHJpbmdcIiAmJiBtYXliZS5tZXNzYWdlID09PSBcIlVuYXV0aG9yaXplZFwiKVxuICApO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2hlY2tVc2VyUGFja2FnZSgpOiBQcm9taXNlPFVzZXJQYWNrYWdlUmVzcG9uc2U+IHtcbiAgLy8gU2ltcGxlIGluLW1lbW9yeSBjYWNoZSB0byBhdm9pZCBkdXBsaWNhdGUgY2FsbHMgZnJvbSBTdHJpY3RNb2RlIGRvdWJsZSBlZmZlY3RzXG4gIC8vIGFuZCBmcm9tIG11bHRpcGxlIGNvbXBvbmVudHMgb24gdGhlIHNhbWUgdmlldy4gU3RhbGUgYWZ0ZXIgNSBzZWNvbmRzLlxuICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICBjb25zdCBUVEwgPSA1MDAwO1xuICBpZiAocGtnQ2FjaGUudmFsdWUgIT09IHVuZGVmaW5lZCAmJiBub3cgLSBwa2dDYWNoZS50cyA8IFRUTCkge1xuICAgIHJldHVybiBwa2dDYWNoZS52YWx1ZTtcbiAgfVxuICBpZiAocGtnQ2FjaGUuaW5GbGlnaHQpIHJldHVybiBwa2dDYWNoZS5pbkZsaWdodDtcblxuICBwa2dDYWNoZS5pbkZsaWdodCA9IChhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHIgPSBhd2FpdCBmZXRjaEpzb24oYCR7QkFTRV9VUkx9L2FwaS91c2VyL2NoZWNrLXBhY2thZ2VgLCB7IG1ldGhvZDogXCJHRVRcIiwgY2FjaGU6IFwibm8tc3RvcmVcIiB9KTtcbiAgICAgIGlmICghci5vaykgdGhyb3cgbmV3IEVycm9yKFwiQ2hlY2sgdXNlciBwYWNrYWdlIGZhaWxlZFwiKTtcbiAgICAgIGNvbnN0IHZhbCA9IHIuZGF0YSBhcyBVc2VyUGFja2FnZVJlc3BvbnNlO1xuICAgICAgcGtnQ2FjaGUudmFsdWUgPSB2YWw7XG4gICAgICBwa2dDYWNoZS50cyA9IERhdGUubm93KCk7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH0gY2F0Y2ggKGU6IHVua25vd24pIHtcbiAgICAgIC8vIERvIE5PVCBjYWNoZSB1bmF1dGhvcml6ZWQ7IGxldCBjYWxsZXJzIHJldHJ5IGFmdGVyIGF1dGggc2V0dGxlc1xuICAgICAgaWYgKGlzVW5hdXRob3JpemVkRXJyb3IoZSkpIHtcbiAgICAgICAgcmV0dXJuIHsgaGFzQWNjZXNzOiBmYWxzZSB9IGFzIFVzZXJQYWNrYWdlUmVzcG9uc2U7XG4gICAgICB9XG4gICAgICB0aHJvdyBlO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBwa2dDYWNoZS5pbkZsaWdodCA9IG51bGw7XG4gICAgfVxuICB9KSgpO1xuICByZXR1cm4gcGtnQ2FjaGUuaW5GbGlnaHQ7XG59XG5cbi8vIFBhY2thZ2UgY2FjaGUgKG1vZHVsZSBzY29wZSlcbmNvbnN0IHBrZ0NhY2hlOiB7XG4gIHZhbHVlOiBVc2VyUGFja2FnZVJlc3BvbnNlIHwgdW5kZWZpbmVkOyAvLyB1bmRlZmluZWQgPSB1bmtub3duXG4gIHRzOiBudW1iZXI7XG4gIGluRmxpZ2h0OiBQcm9taXNlPFVzZXJQYWNrYWdlUmVzcG9uc2U+IHwgbnVsbDtcbn0gPSB7IHZhbHVlOiB1bmRlZmluZWQsIHRzOiAwLCBpbkZsaWdodDogbnVsbCB9O1xuXG4vLyBQdWJsaWMgaGVscGVyIHRvIGNsZWFyIEFQSSBjbGllbnQgY2FjaGVzIChjYWxsIG9uIGxvZ291dClcbmV4cG9ydCBmdW5jdGlvbiBjbGVhckFwaUNhY2hlcygpIHtcbiAgcGtnQ2FjaGUudmFsdWUgPSB1bmRlZmluZWQ7XG4gIHBrZ0NhY2hlLnRzID0gMDtcbiAgcGtnQ2FjaGUuaW5GbGlnaHQgPSBudWxsO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBUYWxraW5nIEhlYWQgKHJlbmRlcikgc3R1YnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZW5kZXJHZW5lcmF0ZShpbnB1dDoge1xuICB0ZXh0OiBzdHJpbmc7XG4gIHZvaWNlSWQ/OiBzdHJpbmc7XG4gIGNvbnNlbnQ6IGJvb2xlYW47XG59KTogUHJvbWlzZTx7IGpvYklkOiBzdHJpbmcgfT4ge1xuICBjb25zdCByID0gYXdhaXQgZmV0Y2hKc29uKGAke0JBU0VfVVJMfS9hcGkvcmVuZGVyL2dlbmVyYXRlYCwge1xuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoaW5wdXQpLFxuICB9KTtcbiAgaWYgKCFyLm9rKSB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gY3JlYXRlIHJlbmRlciBqb2JcIik7XG4gIHJldHVybiByLmRhdGEgYXMgeyBqb2JJZDogc3RyaW5nIH07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRSZW5kZXJKb2Ioam9iSWQ6IHN0cmluZyk6IFByb21pc2U8e1xuICBzdGF0dXM6IFwicXVldWVkXCIgfCBcInJ1bm5pbmdcIiB8IFwic3VjY2VlZGVkXCIgfCBcImZhaWxlZFwiO1xuICB2aWRlb1VybD86IHN0cmluZztcbiAgZXJyb3I/OiBzdHJpbmc7XG59PiB7XG4gIGNvbnN0IHIgPSBhd2FpdCBmZXRjaEpzb24oYCR7QkFTRV9VUkx9L2FwaS9yZW5kZXIvam9icy8ke2VuY29kZVVSSUNvbXBvbmVudChqb2JJZCl9YCwge1xuICAgIG1ldGhvZDogXCJHRVRcIixcbiAgfSk7XG4gIGlmICghci5vaykgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGZldGNoIGpvYiBzdGF0dXNcIik7XG4gIHJldHVybiByLmRhdGEgYXMge1xuICAgIHN0YXR1czogXCJxdWV1ZWRcIiB8IFwicnVubmluZ1wiIHwgXCJzdWNjZWVkZWRcIiB8IFwiZmFpbGVkXCI7XG4gICAgdmlkZW9Vcmw/OiBzdHJpbmc7XG4gICAgZXJyb3I/OiBzdHJpbmc7XG4gIH07XG59XG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBDaGF0IHR5cGVzIChpbmxpbmUpXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuZXhwb3J0IGludGVyZmFjZSBDaGF0TWV0YSB7XHJcbiAgdXNlZENvbnRleHRJZHM/OiBzdHJpbmdbXTtcclxuICByZXF1ZXN0SWQ/OiBzdHJpbmc7XHJcbiAgbGF0ZW5jeU1zPzogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENoYXRNZXNzYWdlIHtcclxuICByb2xlOiBcInVzZXJcIiB8IFwiYXNzaXN0YW50XCI7XHJcbiAgY29udGVudDogc3RyaW5nO1xyXG4gIF9pZD86IHN0cmluZztcclxuICBtZXRhPzogQ2hhdE1ldGE7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2hhdENvbnZlcnNhdGlvbiB7XHJcbiAgX2lkOiBzdHJpbmc7XHJcbiAgdGl0bGU/OiBzdHJpbmc7XHJcbiAgbWVzc2FnZXM6IENoYXRNZXNzYWdlW107XHJcbiAgdXBkYXRlZEF0Pzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbnZlcnNhdGlvblN1bW1hcnkge1xyXG4gIF9pZDogc3RyaW5nO1xyXG4gIHRpdGxlPzogc3RyaW5nO1xyXG4gIHVwZGF0ZWRBdD86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDb252ZXJzYXRpb24ge1xyXG4gIF9pZDogc3RyaW5nO1xyXG4gIHRpdGxlPzogc3RyaW5nO1xyXG4gIG1lc3NhZ2VzOiBDaGF0TWVzc2FnZVtdO1xyXG4gIHVwZGF0ZWRBdD86IHN0cmluZztcclxufVxyXG5cclxuLy8gMjAwIE9LIHBheWxvYWRcclxuZXhwb3J0IGludGVyZmFjZSBDb2FjaENoYXRSZXNwb25zZSB7XHJcbiAgYWk6IHN0cmluZztcclxuICBjb252ZXJzYXRpb246IENoYXRDb252ZXJzYXRpb247XHJcbiAgdXNlZENvbnRleHRJZHM/OiBzdHJpbmdbXTtcclxuICByZXF1ZXN0SWQ/OiBzdHJpbmc7XHJcbiAgbGF0ZW5jeU1zPzogbnVtYmVyO1xyXG4gIHF1b3RhPzogeyB1c2VkOiBudW1iZXI7IGxpbWl0OiBudW1iZXIgfTsgLy8gb3B0aW9uYWxcclxufVxyXG5cclxuLy8gbm9uLTIwMCBwYXlsb2Fkc1xyXG5leHBvcnQgaW50ZXJmYWNlIENvYWNoQ2hhdExpbWl0RGF0YSB7XHJcbiAgZXJyb3I6IHN0cmluZztcclxuICBhY3Rpb24/OiBcInVwZ3JhZGVcIjtcclxuICBxdW90YT86IHsgdXNlZDogbnVtYmVyOyBsaW1pdDogbnVtYmVyIH07XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBDb2FjaENoYXRSYXRlTGltaXREYXRhIHtcclxuICBlcnJvcj86IHN0cmluZztcclxuICBtZXNzYWdlPzogc3RyaW5nO1xyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29hY2hDaGF0TmV0d29ya0Vycm9yIHtcclxuICBlcnJvcjogc3RyaW5nO1xyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29hY2hDaGF0R2VuZXJpY0Vycm9yIHtcclxuICBlcnJvcj86IHN0cmluZztcclxuICBtZXNzYWdlPzogc3RyaW5nO1xyXG59XHJcblxyXG4vLyBEaXNjcmltaW5hdGVkIHVuaW9uIChubyBgYW55YClcclxuZXhwb3J0IHR5cGUgQ29hY2hDaGF0UmVzdWx0ID1cclxuICB8IHsgc3RhdHVzOiAyMDA7IGRhdGE6IENvYWNoQ2hhdFJlc3BvbnNlIH1cclxuICB8IHsgc3RhdHVzOiA0MDI7IGRhdGE6IENvYWNoQ2hhdExpbWl0RGF0YSB9XHJcbiAgfCB7IHN0YXR1czogNDI5OyBkYXRhOiBDb2FjaENoYXRSYXRlTGltaXREYXRhIH1cclxuICB8IHsgc3RhdHVzOiAwOyBkYXRhOiBDb2FjaENoYXROZXR3b3JrRXJyb3IgfVxyXG4gIHwgeyBzdGF0dXM6IG51bWJlcjsgZGF0YTogQ29hY2hDaGF0R2VuZXJpY0Vycm9yIH07XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8qKiBDb2FjaCBjaGF0ICsgY29udmVyc2F0aW9ucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29hY2hDaGF0KHtcbiAgcXVlc3Rpb24sXG4gIGxhdGVzdENvbnRlbnRJbmZvLFxuICBjb252ZXJzYXRpb25JZCxcbiAgdGl0bGUsXG59OiB7XG4gIHF1ZXN0aW9uOiBzdHJpbmc7XG4gIGxhdGVzdENvbnRlbnRJbmZvPzogc3RyaW5nO1xuICBjb252ZXJzYXRpb25JZD86IHN0cmluZztcbiAgdGl0bGU/OiBzdHJpbmc7XG59KTogUHJvbWlzZTxDb2FjaENoYXRSZXN1bHQ+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgJHtCQVNFX1VSTH0vYXBpL2NvYWNoLWNoYXRgLCB7XG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgaGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxuICAgICAgY3JlZGVudGlhbHM6IFwiaW5jbHVkZVwiLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBxdWVzdGlvbixcbiAgICAgICAgbGF0ZXN0Q29udGVudEluZm8sXG4gICAgICAgIGNvbnZlcnNhdGlvbklkLFxuICAgICAgICB0aXRsZSxcbiAgICAgIH0pLFxuICAgIH0pO1xuXHJcbiAgICBjb25zdCBwYXJzZWQgPSBhd2FpdCByZWFkSnNvbk9yVGV4dChyZXMpO1xyXG4gICAgaWYgKHJlcy5zdGF0dXMgPT09IDIwMClcclxuICAgICAgcmV0dXJuIHsgc3RhdHVzOiAyMDAsIGRhdGE6IHBhcnNlZC5kYXRhIGFzIENvYWNoQ2hhdFJlc3BvbnNlIH07XHJcbiAgICBpZiAocmVzLnN0YXR1cyA9PT0gNDAyKVxyXG4gICAgICByZXR1cm4geyBzdGF0dXM6IDQwMiwgZGF0YTogcGFyc2VkLmRhdGEgYXMgQ29hY2hDaGF0TGltaXREYXRhIH07XHJcbiAgICBpZiAocmVzLnN0YXR1cyA9PT0gNDI5KVxyXG4gICAgICByZXR1cm4geyBzdGF0dXM6IDQyOSwgZGF0YTogcGFyc2VkLmRhdGEgYXMgQ29hY2hDaGF0UmF0ZUxpbWl0RGF0YSB9O1xyXG4gICAgcmV0dXJuIHsgc3RhdHVzOiByZXMuc3RhdHVzLCBkYXRhOiBwYXJzZWQuZGF0YSBhcyBDb2FjaENoYXRHZW5lcmljRXJyb3IgfTtcclxuICB9IGNhdGNoIHtcclxuICAgIHJldHVybiB7IHN0YXR1czogMCwgZGF0YTogeyBlcnJvcjogXCJOZXR3b3JrIGVycm9yXCIgfSB9O1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoQ29udmVyc2F0aW9uKGlkOiBzdHJpbmcpOiBQcm9taXNlPENvbnZlcnNhdGlvbj4ge1xuICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgJHtCQVNFX1VSTH0vYXBpL2NvbnZlcnNhdGlvbnMvJHtpZH1gLCB7XG4gICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgIGhlYWRlcnM6IHsgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIgfSxcbiAgICBjcmVkZW50aWFsczogXCJpbmNsdWRlXCIsXG4gICAgY2FjaGU6IFwibm8tc3RvcmVcIixcbiAgfSk7XG4gIGNvbnN0IHBhcnNlZCA9IGF3YWl0IHJlYWRKc29uT3JUZXh0KHJlcyk7XG4gIHJldHVybiBlbnN1cmVPazxDb252ZXJzYXRpb24+KHBhcnNlZCwgXCJGZXRjaCBjb252ZXJzYXRpb25cIik7XG59XG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUNvbnZlcnNhdGlvbihjb252ZXJzYXRpb25JZDogc3RyaW5nKSB7XG4gIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGAke0JBU0VfVVJMfS9hcGkvY29udmVyc2F0aW9ucy8ke2NvbnZlcnNhdGlvbklkfWAsIHtcbiAgICBtZXRob2Q6IFwiREVMRVRFXCIsXG4gICAgY3JlZGVudGlhbHM6IFwiaW5jbHVkZVwiLFxuICB9KTtcbiAgY29uc3QgcGFyc2VkID0gYXdhaXQgcmVhZEpzb25PclRleHQocmVzKTtcbiAgcmV0dXJuIGVuc3VyZU9rKHBhcnNlZCwgXCJEZWxldGUgY29udmVyc2F0aW9uXCIpO1xufVxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVFbXB0eUNvbnZlcnNhdGlvbihcbik6IFByb21pc2U8c3RyaW5nIHwgbnVsbD4ge1xuICB0cnkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGAke0JBU0VfVVJMfS9hcGkvY29udmVyc2F0aW9uc2AsIHtcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICBjcmVkZW50aWFsczogXCJpbmNsdWRlXCIsXG4gICAgICBoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7fSksXG4gICAgfSk7XG4gICAgY29uc3QgcGFyc2VkID0gYXdhaXQgcmVhZEpzb25PclRleHQocmVzKTtcclxuICAgIGNvbnN0IGRhdGEgPSBlbnN1cmVPazx7IF9pZD86IHN0cmluZzsgaWQ/OiBzdHJpbmcgfT4oXHJcbiAgICAgIHBhcnNlZCxcclxuICAgICAgXCJDcmVhdGUgY29udmVyc2F0aW9uXCJcclxuICAgICk7XHJcbiAgICByZXR1cm4gZGF0YS5faWQgPz8gZGF0YS5pZCA/PyBudWxsO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgY3JlYXRpbmcgbmV3IGNvbnZlcnNhdGlvbjpcIiwgZXJyb3IpO1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVDb252ZXJzYXRpb25UaXRsZShcbiAgY29udmVyc2F0aW9uSWQ6IHN0cmluZyxcbiAgZmlyc3RVc2VyTWVzc2FnZTogc3RyaW5nXG4pIHtcbiAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goXG4gICAgYCR7QkFTRV9VUkx9L2FwaS9jb252ZXJzYXRpb25zLyR7Y29udmVyc2F0aW9uSWR9L2dlbmVyYXRlLXRpdGxlYCxcbiAgICB7XG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgaGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxuICAgICAgY3JlZGVudGlhbHM6IFwiaW5jbHVkZVwiLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBmaXJzdFVzZXJNZXNzYWdlIH0pLFxuICAgICAgY2FjaGU6IFwibm8tc3RvcmVcIixcbiAgICB9XG4gICk7XG4gIGNvbnN0IHBhcnNlZCA9IGF3YWl0IHJlYWRKc29uT3JUZXh0KHJlcyk7XG4gIGNvbnN0IGRhdGEgPSBlbnN1cmVPazx7IHRpdGxlOiBzdHJpbmcgfCBudWxsIH0+KHBhcnNlZCwgXCJHZW5lcmF0ZSB0aXRsZVwiKTtcbiAgcmV0dXJuIGRhdGEudGl0bGUgfHwgbnVsbDtcbn1cblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hDb252ZXJzYXRpb25zKCk6IFByb21pc2U8Q29udmVyc2F0aW9uU3VtbWFyeVtdPiB7XG4gIGNvbnN0IHVybCA9IGAke0JBU0VfVVJMfS9hcGkvY29udmVyc2F0aW9ucz90cz0ke0RhdGUubm93KCl9YDtcbiAgY29uc3QgciA9IGF3YWl0IGZldGNoSnNvbih1cmwsIHsgbWV0aG9kOiBcIkdFVFwiLCBjYWNoZTogXCJuby1zdG9yZVwiIH0pO1xuICBpZiAoIXIub2spIHRocm93IG5ldyBFcnJvcihcIkZldGNoIGNvbnZlcnNhdGlvbnMgZmFpbGVkXCIpO1xuICByZXR1cm4gci5kYXRhIGFzIENvbnZlcnNhdGlvblN1bW1hcnlbXTtcbn1cblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8qKiBGZWVkYmFjayAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VuZEZlZWRiYWNrKG1lc3NhZ2U6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuIH0+IHtcbiAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYCR7QkFTRV9VUkx9L2FwaS9mZWVkYmFja2AsIHtcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGNyZWRlbnRpYWxzOiBcImluY2x1ZGVcIixcbiAgICBoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBtZXNzYWdlIH0pLFxuICB9KTtcblxyXG4gIGNvbnN0IHBhcnNlZCA9IGF3YWl0IHJlYWRKc29uT3JUZXh0KHJlcyk7XHJcbiAgaWYgKCFwYXJzZWQub2spIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgdHlwZW9mIHBhcnNlZC5kYXRhID09PSBcInN0cmluZ1wiXHJcbiAgICAgICAgPyBwYXJzZWQuZGF0YVxyXG4gICAgICAgIDogcGFyc2VkLmRhdGE/LmVycm9yIHx8IGBGYWlsZWQgdG8gc2VuZCBmZWVkYmFjayAoJHtwYXJzZWQuc3RhdHVzfSlgXHJcbiAgICApO1xyXG4gIH1cclxuICByZXR1cm4gcGFyc2VkLmRhdGEgYXMgeyBzdWNjZXNzOiBib29sZWFuIH07XHJcbn1cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLyoqIEFuYWx5emUgKHVwbG9hZCArIGdldC91cGRhdGUpICovXHJcbmV4cG9ydCB0eXBlIEFuYWx5emVSZXNwb25zZSA9IHtcbiAgbWVzc2FnZT86IHN0cmluZztcclxuICByZXF1ZXN0SWQ/OiBzdHJpbmc7XHJcbiAgaW5zaWdodHM6IFJlc3VsdERvYztcclxuICBkdXJhdGlvbnM/OiB7XHJcbiAgICB0b3RhbF9tczogbnVtYmVyO1xyXG4gICAgdmlzaW9uX21zOiBudW1iZXI7XHJcbiAgICBjYXB0aW9uc19tczogbnVtYmVyO1xyXG4gIH07XHJcbiAgZHVwbGljYXRlPzogYm9vbGVhbjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhbmFseXplSW1hZ2VNdWx0aXBhcnQob3B0czoge1xuICBmaWxlOiBGaWxlO1xuICBnb2FsPzogXCJzdWJzXCIgfCBcInBwdlwiIHwgXCJjdXN0b21zXCI7XG4gIGxpbmtCYXNlPzogc3RyaW5nO1xuICBjYXB0aW9ucz86IGJvb2xlYW47IC8vIGRlZmF1bHQgdHJ1ZVxuICBvblByb2dyZXNzPzogKHBjdDogbnVtYmVyKSA9PiB2b2lkO1xuICBzaWduYWw/OiBBYm9ydFNpZ25hbDtcbn0pOiBQcm9taXNlPEFuYWx5emVSZXNwb25zZT4ge1xuICBjb25zdCB7IGZpbGUsIGdvYWwsIGxpbmtCYXNlLCBvblByb2dyZXNzLCBjYXB0aW9ucyA9IHRydWUsIHNpZ25hbCB9ID0gb3B0cztcblxyXG4gIGNvbnN0IGZvcm0gPSBuZXcgRm9ybURhdGEoKTtcclxuICBmb3JtLmFwcGVuZChcImltYWdlXCIsIGZpbGUpO1xyXG4gIGlmIChnb2FsKSBmb3JtLmFwcGVuZChcImdvYWxcIiwgZ29hbCk7XG4gIGlmIChsaW5rQmFzZSkgZm9ybS5hcHBlbmQoXCJsaW5rQmFzZVwiLCBsaW5rQmFzZSk7XG5cclxuICAvLyBJbmNsdWRlIGJyb3dzZXIgdGltZXpvbmUgc28gYmFja2VuZCByZXR1cm5zIGxvY2FsIHdpbmRvd3NcclxuICB0cnkge1xyXG4gICAgY29uc3QgdGltZXpvbmUgPSBJbnRsLkRhdGVUaW1lRm9ybWF0KCkucmVzb2x2ZWRPcHRpb25zKCkudGltZVpvbmU7XHJcbiAgICBpZiAodGltZXpvbmUpIGZvcm0uYXBwZW5kKFwidGltZXpvbmVcIiwgdGltZXpvbmUpO1xyXG4gIH0gY2F0Y2gge31cclxuXHJcbiAgY29uc3QgdXJsID1cclxuICAgIGAke0JBU0VfVVJMfS9hcGkvYW5hbHl6ZWAgKyAoY2FwdGlvbnMgPT09IGZhbHNlID8gYD9jYXB0aW9ucz1mYWxzZWAgOiBcIlwiKTtcclxuXHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB4aHIub3BlbihcIlBPU1RcIiwgdXJsLCB0cnVlKTtcbiAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcblxyXG4gICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHtcclxuICAgICAgaWYgKHhoci5yZWFkeVN0YXRlICE9PSA0KSByZXR1cm47XHJcbiAgICAgIGlmICh4aHIuc3RhdHVzID49IDIwMCAmJiB4aHIuc3RhdHVzIDwgMzAwKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGNvbnN0IGpzb24gPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpIGFzIEFuYWx5emVSZXNwb25zZTtcclxuICAgICAgICByZXNvbHZlKGpzb24pO1xyXG4gICAgICAgIH0gY2F0Y2gge1xyXG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIkludmFsaWQgSlNPTiBmcm9tIHNlcnZlci5cIikpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgY29uc3QgZXJyID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoZXJyPy5lcnJvciB8fCBgVXBsb2FkIGZhaWxlZCAoJHt4aHIuc3RhdHVzfSlgKSk7XHJcbiAgICAgICAgfSBjYXRjaCB7XHJcbiAgICAgICAgICByZWplY3QobmV3IEVycm9yKGBVcGxvYWQgZmFpbGVkICgke3hoci5zdGF0dXN9KWApKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgaWYgKHhoci51cGxvYWQgJiYgdHlwZW9mIG9uUHJvZ3Jlc3MgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICB4aHIudXBsb2FkLm9ucHJvZ3Jlc3MgPSAoZXZ0KSA9PiB7XHJcbiAgICAgICAgaWYgKCFldnQubGVuZ3RoQ29tcHV0YWJsZSkgcmV0dXJuO1xyXG4gICAgICAgIG9uUHJvZ3Jlc3MoTWF0aC5yb3VuZCgoZXZ0LmxvYWRlZCAvIGV2dC50b3RhbCkgKiAxMDApKTtcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICB4aHIub25lcnJvciA9ICgpID0+IHJlamVjdChuZXcgRXJyb3IoXCJOZXR3b3JrIGVycm9yXCIpKTtcblxuICAgIC8vIFN1cHBvcnQgZXh0ZXJuYWwgYWJvcnQgdmlhIEFib3J0Q29udHJvbGxlclxuICAgIGxldCBhYm9ydGVkID0gZmFsc2U7XG4gICAgY29uc3Qgb25BYm9ydCA9ICgpID0+IHtcbiAgICAgIGFib3J0ZWQgPSB0cnVlO1xuICAgICAgdHJ5IHsgeGhyLmFib3J0KCk7IH0gY2F0Y2gge31cbiAgICAgIHJlamVjdChuZXcgRE9NRXhjZXB0aW9uKFwiQWJvcnRlZFwiLCBcIkFib3J0RXJyb3JcIikpO1xuICAgIH07XG4gICAgaWYgKHNpZ25hbCkge1xuICAgICAgaWYgKHNpZ25hbC5hYm9ydGVkKSByZXR1cm4gb25BYm9ydCgpO1xuICAgICAgc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0LCB7IG9uY2U6IHRydWUgfSk7XG4gICAgfVxuICAgIHhoci5zZW5kKGZvcm0pO1xuXG4gICAgLy8gQ2xlYW51cCBhYm9ydCBsaXN0ZW5lciB3aGVuIHByb21pc2Ugc2V0dGxlc1xuICAgIGNvbnN0IGNsZWFudXAgPSAoKSA9PiB7XG4gICAgICBpZiAoc2lnbmFsKSBzaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uQWJvcnQpO1xuICAgIH07XG4gICAgeGhyLm9ubG9hZGVuZCA9ICgpID0+IHsgaWYgKCFhYm9ydGVkKSBjbGVhbnVwKCk7IH07XG4gIH0pO1xufVxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBbmFseXNpc0J5SWQoaWQ6IHN0cmluZykge1xuICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgJHtCQVNFX1VSTH0vYXBpL2FuYWx5emUvJHtpZH1gLCB7XG4gICAgY2FjaGU6IFwibm8tc3RvcmVcIixcbiAgfSk7XG4gIGNvbnN0IHBhcnNlZCA9IGF3YWl0IHJlYWRKc29uT3JUZXh0KHJlcyk7XHJcbiAgcmV0dXJuIGVuc3VyZU9rPFJlc3VsdERvYz4ocGFyc2VkLCBcIkZldGNoIHJlc3VsdCBieSBpZFwiKTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUFuYWx5c2lzQnlJZChcbiAgaWQ6IHN0cmluZyxcbiAgcGF0Y2g6IFBhcnRpYWw8UmVzdWx0RG9jPlxuKTogUHJvbWlzZTxSZXN1bHREb2M+IHtcbiAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYCR7QkFTRV9VUkx9L2FwaS9hbmFseXplLyR7aWR9YCwge1xuICAgIG1ldGhvZDogXCJQQVRDSFwiLFxuICAgIGNyZWRlbnRpYWxzOiBcImluY2x1ZGVcIixcbiAgICBoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkocGF0Y2gpLFxuICB9KTtcbiAgY29uc3QgcGFyc2VkID0gYXdhaXQgcmVhZEpzb25PclRleHQocmVzKTtcclxuICByZXR1cm4gZW5zdXJlT2s8UmVzdWx0RG9jPihwYXJzZWQsIFwiVXBkYXRlIGFuYWx5c2lzXCIpO1xyXG59XHJcbi8vIC0tLSBRdWljayBQcm9tcHRzIHR5cGVzIC0tLVxyXG5leHBvcnQgaW50ZXJmYWNlIFN1Z2dlc3RQcm9tcHRzUmVzcG9uc2Uge1xyXG4gIHByb21wdHM6IHN0cmluZ1tdO1xyXG4gIG1ldGE6IHsgcGxhbjogc3RyaW5nOyBuaWNoZTogc3RyaW5nOyB0ejogc3RyaW5nIH07XHJcbn1cclxuXHJcbi8vIC0tLSBRdWljayBQcm9tcHRzIEFQSSAtLS1cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoQ29hY2hDaGF0UHJvbXB0cygpOiBQcm9taXNlPFN1Z2dlc3RQcm9tcHRzUmVzcG9uc2U+IHtcbiAgY29uc3QgdXJsID0gYCR7QkFTRV9VUkx9L2FwaS9jb2FjaC1jaGF0L3Byb21wdHM/dHM9JHtEYXRlLm5vdygpfWA7XG4gIGNvbnN0IHIgPSBhd2FpdCBmZXRjaEpzb24odXJsLCB7IG1ldGhvZDogXCJHRVRcIiwgY2FjaGU6IFwibm8tc3RvcmVcIiB9KTtcbiAgaWYgKCFyLm9rKSB0aHJvdyBuZXcgRXJyb3IoXCJGZXRjaCBjb2FjaCBwcm9tcHRzIGZhaWxlZFwiKTtcbiAgcmV0dXJuIHIuZGF0YSBhcyBTdWdnZXN0UHJvbXB0c1Jlc3BvbnNlO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vKiogVGV4dC10by1TcGVlY2ggKEVsZXZlbkxhYnMgcGFzc3Rocm91Z2gpICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdHRzU3ludGhlc2l6ZShcbiAgdGV4dDogc3RyaW5nLFxuICBvcHRzOiB7IHZvaWNlSWQ/OiBzdHJpbmc7IGZvcm1hdD86IFwibXAzXCIgfCBcIm9nZ1wiIH0gPSB7fVxuKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh7IHRleHQgfSk7XG4gIGlmIChvcHRzLnZvaWNlSWQpIHBhcmFtcy5zZXQoXCJ2b2ljZUlkXCIsIG9wdHMudm9pY2VJZCk7XG4gIGlmIChvcHRzLmZvcm1hdCkgcGFyYW1zLnNldChcImZvcm1hdFwiLCBvcHRzLmZvcm1hdCk7XG4gIHBhcmFtcy5zZXQoXCJ0c1wiLCBTdHJpbmcoRGF0ZS5ub3coKSkpO1xuICByZXR1cm4gYCR7QkFTRV9VUkx9L2FwaS90dHM/JHtwYXJhbXMudG9TdHJpbmcoKX1gO1xufVxuIl0sIm5hbWVzIjpbIkJBU0VfVVJMIiwiZmV0Y2hKc29uIiwicmVhZEpzb25PclRleHQiLCJyZXMiLCJ0ZXh0Iiwib2siLCJzdGF0dXMiLCJkYXRhIiwiSlNPTiIsInBhcnNlIiwiZW5zdXJlT2siLCJyIiwid2hhdCIsIm1zZyIsInN0cmluZ2lmeSIsIkVycm9yIiwiZmV0Y2hBbmFseXNpc0hpc3RvcnkiLCJwYWdlIiwibGltaXQiLCJ1cmwiLCJEYXRlIiwibm93IiwibWV0aG9kIiwiY2FjaGUiLCJkZWxldGVBbmFseXNpc1Jlc3VsdCIsImlkIiwiZmV0Y2giLCJoZWFkZXJzIiwicGFyc2VkIiwic3RhcnRDaGVja291dCIsInBhY2thZ2VJZCIsIlVTRV9CRkYiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfVVNFX0JGRiIsImNyZWRlbnRpYWxzIiwiYm9keSIsImVycm9yIiwid2luZG93IiwibG9jYXRpb24iLCJocmVmIiwidmVyaWZ5U2Vzc2lvbiIsInNlc3Npb25JZCIsImJhc2UiLCJlbmNvZGVVUklDb21wb25lbnQiLCJwdXJjaGFzZVBhY2thZ2UiLCJpc1VuYXV0aG9yaXplZEVycm9yIiwiZSIsIm1heWJlIiwibWVzc2FnZSIsImNoZWNrVXNlclBhY2thZ2UiLCJUVEwiLCJwa2dDYWNoZSIsInZhbHVlIiwidW5kZWZpbmVkIiwidHMiLCJpbkZsaWdodCIsInZhbCIsImhhc0FjY2VzcyIsImNsZWFyQXBpQ2FjaGVzIiwicmVuZGVyR2VuZXJhdGUiLCJpbnB1dCIsImdldFJlbmRlckpvYiIsImpvYklkIiwiY29hY2hDaGF0IiwicXVlc3Rpb24iLCJsYXRlc3RDb250ZW50SW5mbyIsImNvbnZlcnNhdGlvbklkIiwidGl0bGUiLCJmZXRjaENvbnZlcnNhdGlvbiIsImRlbGV0ZUNvbnZlcnNhdGlvbiIsImNyZWF0ZUVtcHR5Q29udmVyc2F0aW9uIiwiX2lkIiwiY29uc29sZSIsImdlbmVyYXRlQ29udmVyc2F0aW9uVGl0bGUiLCJmaXJzdFVzZXJNZXNzYWdlIiwiZmV0Y2hDb252ZXJzYXRpb25zIiwic2VuZEZlZWRiYWNrIiwiYW5hbHl6ZUltYWdlTXVsdGlwYXJ0Iiwib3B0cyIsImZpbGUiLCJnb2FsIiwibGlua0Jhc2UiLCJvblByb2dyZXNzIiwiY2FwdGlvbnMiLCJzaWduYWwiLCJmb3JtIiwiRm9ybURhdGEiLCJhcHBlbmQiLCJ0aW1lem9uZSIsIkludGwiLCJEYXRlVGltZUZvcm1hdCIsInJlc29sdmVkT3B0aW9ucyIsInRpbWVab25lIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJ3aXRoQ3JlZGVudGlhbHMiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwianNvbiIsInJlc3BvbnNlVGV4dCIsImVyciIsInVwbG9hZCIsIm9ucHJvZ3Jlc3MiLCJldnQiLCJsZW5ndGhDb21wdXRhYmxlIiwiTWF0aCIsInJvdW5kIiwibG9hZGVkIiwidG90YWwiLCJvbmVycm9yIiwiYWJvcnRlZCIsIm9uQWJvcnQiLCJhYm9ydCIsIkRPTUV4Y2VwdGlvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbmNlIiwic2VuZCIsImNsZWFudXAiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib25sb2FkZW5kIiwiZ2V0QW5hbHlzaXNCeUlkIiwidXBkYXRlQW5hbHlzaXNCeUlkIiwicGF0Y2giLCJmZXRjaENvYWNoQ2hhdFByb21wdHMiLCJ0dHNTeW50aGVzaXplIiwicGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwidm9pY2VJZCIsInNldCIsImZvcm1hdCIsIlN0cmluZyIsInRvU3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/utils/api.ts\n"));

/***/ })

});