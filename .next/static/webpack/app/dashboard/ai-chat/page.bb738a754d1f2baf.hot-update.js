"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/ai-chat/page",{

/***/ "(app-pages-browser)/./src/app/utils/api.ts":
/*!******************************!*\
  !*** ./src/app/utils/api.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeImageMultipart: function() { return /* binding */ analyzeImageMultipart; },\n/* harmony export */   checkUserPackage: function() { return /* binding */ checkUserPackage; },\n/* harmony export */   coachChat: function() { return /* binding */ coachChat; },\n/* harmony export */   createEmptyConversation: function() { return /* binding */ createEmptyConversation; },\n/* harmony export */   deleteAnalysisResult: function() { return /* binding */ deleteAnalysisResult; },\n/* harmony export */   deleteConversation: function() { return /* binding */ deleteConversation; },\n/* harmony export */   fetchAnalysisHistory: function() { return /* binding */ fetchAnalysisHistory; },\n/* harmony export */   fetchConversation: function() { return /* binding */ fetchConversation; },\n/* harmony export */   fetchConversations: function() { return /* binding */ fetchConversations; },\n/* harmony export */   generateConversationTitle: function() { return /* binding */ generateConversationTitle; },\n/* harmony export */   getAnalysisById: function() { return /* binding */ getAnalysisById; },\n/* harmony export */   getClientEmail: function() { return /* binding */ getClientEmail; },\n/* harmony export */   purchasePackage: function() { return /* binding */ purchasePackage; },\n/* harmony export */   sendFeedback: function() { return /* binding */ sendFeedback; },\n/* harmony export */   startCheckout: function() { return /* binding */ startCheckout; },\n/* harmony export */   updateAnalysisById: function() { return /* binding */ updateAnalysisById; },\n/* harmony export */   verifySession: function() { return /* binding */ verifySession; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n// src/app/utils/api.ts\nconst BASE_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:5001\";\n// src/app/utils/auth-lite.ts\nfunction getClientEmail() {\n    if (false) {}\n    return localStorage.getItem(\"userEmail\") || \"\";\n}\nasync function readJsonOrText(res) {\n    const text = await res.text();\n    try {\n        return {\n            ok: res.ok,\n            status: res.status,\n            data: JSON.parse(text)\n        };\n    } catch (e) {\n        return {\n            ok: res.ok,\n            status: res.status,\n            data: text\n        };\n    }\n}\nfunction ensureOk(r, what) {\n    if (!r.ok) {\n        const msg = typeof r.data === \"string\" ? r.data : JSON.stringify(r.data, null, 2);\n        throw new Error(\"\".concat(what, \" failed (\").concat(r.status, \") - \").concat(msg));\n    }\n    return r.data;\n}\nasync function fetchAnalysisHistory(email) {\n    let page = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, limit = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 10;\n    const params = new URLSearchParams({\n        email,\n        page: String(page),\n        limit: String(limit),\n        ts: String(Date.now())\n    });\n    const res = await fetch(\"\".concat(BASE_URL, \"/api/analyze?\").concat(params.toString()), {\n        method: \"GET\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        cache: \"no-store\"\n    });\n    const parsed = await readJsonOrText(res);\n    return ensureOk(parsed, \"Fetch analysis history\");\n}\nasync function deleteAnalysisResult(id) {\n    const res = await fetch(\"\".concat(BASE_URL, \"/api/analyze/\").concat(id), {\n        method: \"DELETE\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    });\n    const parsed = await readJsonOrText(res);\n    return ensureOk(parsed, \"Delete analysis result\");\n}\n// ============================================================================\n// Stripe checkout (unchanged)\n// ============================================================================\nasync function startCheckout(email, packageId) {\n    const res = await fetch(\"\".concat(BASE_URL, \"/api/checkout/create-checkout-session\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            email,\n            packageId\n        })\n    });\n    const { ok, data } = await readJsonOrText(res);\n    if (!ok) throw new Error(typeof data === \"string\" ? data : (data === null || data === void 0 ? void 0 : data.error) || \"Failed to start checkout\");\n    if (!(data === null || data === void 0 ? void 0 : data.url)) throw new Error(\"No checkout URL returned\");\n    window.location.href = data.url;\n}\nasync function verifySession(sessionId) {\n    const res = await fetch(\"\".concat(BASE_URL, \"/api/checkout/verify-session?session_id=\").concat(encodeURIComponent(sessionId)));\n    const parsed = await readJsonOrText(res);\n    return ensureOk(parsed, \"Verify session\");\n}\nasync function purchasePackage(email, packageId) {\n    const res = await fetch(\"\".concat(BASE_URL, \"/api/purchase\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            email,\n            packageId\n        })\n    });\n    const parsed = await readJsonOrText(res);\n    return ensureOk(parsed, \"Purchase package\");\n}\nasync function checkUserPackage(email) {\n    const res = await fetch(\"\".concat(BASE_URL, \"/api/user/check-package?email=\").concat(encodeURIComponent(email)));\n    const parsed = await readJsonOrText(res);\n    return ensureOk(parsed, \"Check user package\");\n}\nasync function coachChat(param) {\n    let { email, question, latestContentInfo, conversationId, title } = param;\n    try {\n        const res = await fetch(\"\".concat(BASE_URL, \"/api/coach-chat\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                email,\n                question,\n                latestContentInfo,\n                conversationId,\n                title\n            })\n        });\n        const parsed = await readJsonOrText(res); // { ok, status, data }\n        return {\n            status: parsed.status,\n            data: parsed.data\n        };\n    } catch (e) {\n        return {\n            status: 0,\n            data: {\n                error: \"Network error\"\n            }\n        };\n    }\n}\nasync function fetchConversation(id) {\n    const res = await fetch(\"\".concat(BASE_URL, \"/api/conversations/\").concat(id), {\n        method: \"GET\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        cache: \"no-store\"\n    });\n    const parsed = await readJsonOrText(res);\n    return ensureOk(parsed, \"Fetch conversation\");\n}\nasync function deleteConversation(conversationId) {\n    const res = await fetch(\"\".concat(BASE_URL, \"/api/conversations/\").concat(conversationId), {\n        method: \"DELETE\"\n    });\n    const parsed = await readJsonOrText(res);\n    return ensureOk(parsed, \"Delete conversation\");\n}\nasync function createEmptyConversation(email) {\n    try {\n        const res = await fetch(\"\".concat(BASE_URL, \"/api/conversations\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                email\n            })\n        });\n        const parsed = await readJsonOrText(res);\n        const data = ensureOk(parsed, \"Create conversation\");\n        var _data__id, _ref;\n        return (_ref = (_data__id = data._id) !== null && _data__id !== void 0 ? _data__id : data.id) !== null && _ref !== void 0 ? _ref : null;\n    } catch (error) {\n        console.error(\"Error creating new conversation:\", error);\n        return null;\n    }\n}\nasync function generateConversationTitle(conversationId, firstUserMessage) {\n    const res = await fetch(\"\".concat(BASE_URL, \"/api/conversations/\").concat(conversationId, \"/generate-title\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            firstUserMessage\n        }),\n        cache: \"no-store\"\n    });\n    const parsed = await readJsonOrText(res);\n    const data = ensureOk(parsed, \"Generate title\");\n    return data.title || null;\n}\nasync function fetchConversations(email) {\n    const url = \"\".concat(BASE_URL, \"/api/conversations?email=\").concat(encodeURIComponent(email), \"&ts=\").concat(Date.now());\n    const res = await fetch(url, {\n        method: \"GET\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        cache: \"no-store\"\n    });\n    const parsed = await readJsonOrText(res);\n    return ensureOk(parsed, \"Fetch conversations\");\n}\nasync function sendFeedback(message, email) {\n    const res = await fetch(\"\".concat(BASE_URL, \"/api/feedback\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            message,\n            email\n        })\n    });\n    const parsed = await readJsonOrText(res);\n    if (!parsed.ok) {\n        var _parsed_data;\n        throw new Error(typeof parsed.data === \"string\" ? parsed.data : ((_parsed_data = parsed.data) === null || _parsed_data === void 0 ? void 0 : _parsed_data.error) || \"Failed to send feedback (\".concat(parsed.status, \")\"));\n    }\n    // backend returns { success: true }\n    return parsed.data;\n}\nfunction analyzeImageMultipart(opts) {\n    const { file, email, goal, linkBase, onProgress, captions = true } = opts;\n    const form = new FormData();\n    form.append(\"image\", file);\n    form.append(\"email\", email);\n    if (goal) form.append(\"goal\", goal);\n    if (linkBase) form.append(\"linkBase\", linkBase);\n    // ⬇️ NEW: include browser timezone so backend returns local windows\n    try {\n        const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n        if (timezone) form.append(\"timezone\", timezone);\n    } catch (e) {}\n    const url = \"\".concat(BASE_URL, \"/api/analyze\") + (captions === false ? \"?captions=false\" : \"\");\n    return new Promise((resolve, reject)=>{\n        const xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", url, true);\n        xhr.onreadystatechange = ()=>{\n            if (xhr.readyState !== 4) return;\n            if (xhr.status >= 200 && xhr.status < 300) {\n                try {\n                    const json = JSON.parse(xhr.responseText);\n                    resolve(json);\n                } catch (e) {\n                    reject(new Error(\"Invalid JSON from server.\"));\n                }\n            } else {\n                try {\n                    const err = JSON.parse(xhr.responseText);\n                    reject(new Error((err === null || err === void 0 ? void 0 : err.error) || \"Upload failed (\".concat(xhr.status, \")\")));\n                } catch (e) {\n                    reject(new Error(\"Upload failed (\".concat(xhr.status, \")\")));\n                }\n            }\n        };\n        if (xhr.upload && typeof onProgress === \"function\") {\n            xhr.upload.onprogress = (evt)=>{\n                if (!evt.lengthComputable) return;\n                onProgress(Math.round(evt.loaded / evt.total * 100));\n            };\n        }\n        xhr.onerror = ()=>reject(new Error(\"Network error\"));\n        xhr.send(form);\n    });\n}\nasync function getAnalysisById(id) {\n    const res = await fetch(\"\".concat(BASE_URL, \"/api/analyze/\").concat(id), {\n        cache: \"no-store\"\n    });\n    const parsed = await readJsonOrText(res);\n    return ensureOk(parsed, \"Fetch result by id\");\n}\nasync function updateAnalysisById(id, patch) {\n    const res = await fetch(\"\".concat(BASE_URL, \"/api/analyze/\").concat(id), {\n        method: \"PATCH\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(patch)\n    });\n    const parsed = await readJsonOrText(res);\n    return ensureOk(parsed, \"Update analysis\");\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvdXRpbHMvYXBpLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHVCQUF1QjtBQUd2QixNQUFNQSxXQUFXQyxPQUFPQSxDQUFDQyxHQUFHLENBQUNDLG1CQUFtQixJQUFJO0FBQ3BELDZCQUE2QjtBQUN0QixTQUFTQztJQUNkLElBQUksS0FBNkIsRUFBRSxFQUFVO0lBQzdDLE9BQU9DLGFBQWFDLE9BQU8sQ0FBQyxnQkFBZ0I7QUFDOUM7QUFDQSxlQUFlQyxlQUFlQyxHQUFhO0lBQ3pDLE1BQU1DLE9BQU8sTUFBTUQsSUFBSUMsSUFBSTtJQUMzQixJQUFJO1FBQ0YsT0FBTztZQUFFQyxJQUFJRixJQUFJRSxFQUFFO1lBQUVDLFFBQVFILElBQUlHLE1BQU07WUFBRUMsTUFBTUMsS0FBS0MsS0FBSyxDQUFDTDtRQUFNO0lBQ2xFLEVBQUUsVUFBTTtRQUNOLE9BQU87WUFBRUMsSUFBSUYsSUFBSUUsRUFBRTtZQUFFQyxRQUFRSCxJQUFJRyxNQUFNO1lBQUVDLE1BQU1IO1FBQUs7SUFDdEQ7QUFDRjtBQUVBLFNBQVNNLFNBQ1BDLENBQWlELEVBQ2pEQyxJQUFZO0lBRVosSUFBSSxDQUFDRCxFQUFFTixFQUFFLEVBQUU7UUFDVCxNQUFNUSxNQUNKLE9BQU9GLEVBQUVKLElBQUksS0FBSyxXQUFXSSxFQUFFSixJQUFJLEdBQUdDLEtBQUtNLFNBQVMsQ0FBQ0gsRUFBRUosSUFBSSxFQUFFLE1BQU07UUFDckUsTUFBTSxJQUFJUSxNQUFNLEdBQW1CSixPQUFoQkMsTUFBSyxhQUEwQkMsT0FBZkYsRUFBRUwsTUFBTSxFQUFDLFFBQVUsT0FBSk87SUFDcEQ7SUFDQSxPQUFPRixFQUFFSixJQUFJO0FBQ2Y7QUFJTyxlQUFlUyxxQkFDcEJDLEtBQWE7UUFDYkMsT0FBQUEsaUVBQU8sR0FDUEMsUUFBQUEsaUVBQVE7SUFFUixNQUFNQyxTQUFTLElBQUlDLGdCQUFnQjtRQUNqQ0o7UUFDQUMsTUFBTUks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QUFlb0UsbUJBQW1CbEUsRUFBVSxFQUFFbUUsS0FBeUI7SUFDNUUsTUFBTWpHLE1BQU0sTUFBTXVCLE1BQU0sR0FBMkJPLE9BQXhCdEMsVUFBUyxpQkFBa0IsT0FBSHNDLEtBQU07UUFDdkRMLFFBQVE7UUFDUkMsU0FBUztZQUFFLGdCQUFnQjtRQUFtQjtRQUM5Q08sTUFBTTVCLEtBQUtNLFNBQVMsQ0FBQ3NGO0lBQ3ZCO0lBQ0EsTUFBTXJFLFNBQVMsTUFBTTdCLGVBQWVDO0lBQ3BDLE9BQU9PLFNBQW9CcUIsUUFBUTtBQUNyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvYXBwL3V0aWxzL2FwaS50cz85MzczIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9hcHAvdXRpbHMvYXBpLnRzXHJcbmltcG9ydCB0eXBlIHsgUmVzdWx0RG9jIH0gZnJvbSBcIkAvYXBwL3R5cGVzL2FuYWx5c2lzXCI7XHJcblxyXG5jb25zdCBCQVNFX1VSTCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0FQSV9VUkwgfHwgXCJodHRwOi8vbG9jYWxob3N0OjUwMDFcIjtcclxuLy8gc3JjL2FwcC91dGlscy9hdXRoLWxpdGUudHNcclxuZXhwb3J0IGZ1bmN0aW9uIGdldENsaWVudEVtYWlsKCk6IHN0cmluZyB7XHJcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIpIHJldHVybiBcIlwiO1xyXG4gIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInVzZXJFbWFpbFwiKSB8fCBcIlwiO1xyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIHJlYWRKc29uT3JUZXh0KHJlczogUmVzcG9uc2UpIHtcclxuICBjb25zdCB0ZXh0ID0gYXdhaXQgcmVzLnRleHQoKTtcclxuICB0cnkge1xyXG4gICAgcmV0dXJuIHsgb2s6IHJlcy5vaywgc3RhdHVzOiByZXMuc3RhdHVzLCBkYXRhOiBKU09OLnBhcnNlKHRleHQpIH07XHJcbiAgfSBjYXRjaCB7XHJcbiAgICByZXR1cm4geyBvazogcmVzLm9rLCBzdGF0dXM6IHJlcy5zdGF0dXMsIGRhdGE6IHRleHQgfTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVuc3VyZU9rPFQgPSB1bmtub3duPihcclxuICByOiB7IG9rOiBib29sZWFuOyBzdGF0dXM6IG51bWJlcjsgZGF0YTogdW5rbm93biB9LFxyXG4gIHdoYXQ6IHN0cmluZ1xyXG4pOiBUIHtcclxuICBpZiAoIXIub2spIHtcclxuICAgIGNvbnN0IG1zZyA9XHJcbiAgICAgIHR5cGVvZiByLmRhdGEgPT09IFwic3RyaW5nXCIgPyByLmRhdGEgOiBKU09OLnN0cmluZ2lmeShyLmRhdGEsIG51bGwsIDIpO1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKGAke3doYXR9IGZhaWxlZCAoJHtyLnN0YXR1c30pIC0gJHttc2d9YCk7XHJcbiAgfVxyXG4gIHJldHVybiByLmRhdGEgYXMgVDtcclxufVxyXG5cclxuXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hBbmFseXNpc0hpc3RvcnkoXHJcbiAgZW1haWw6IHN0cmluZyxcclxuICBwYWdlID0gMSxcclxuICBsaW1pdCA9IDEwXHJcbik6IFByb21pc2U8eyByZXN1bHRzOiBSZXN1bHREb2NbXTsgdG90YWw6IG51bWJlciB9PiB7XHJcbiAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh7XHJcbiAgICBlbWFpbCxcclxuICAgIHBhZ2U6IFN0cmluZyhwYWdlKSxcclxuICAgIGxpbWl0OiBTdHJpbmcobGltaXQpLFxyXG4gICAgdHM6IFN0cmluZyhEYXRlLm5vdygpKSxcclxuICB9KTtcclxuXHJcbiAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYCR7QkFTRV9VUkx9L2FwaS9hbmFseXplPyR7cGFyYW1zLnRvU3RyaW5nKCl9YCwge1xyXG4gICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgaGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxyXG4gICAgY2FjaGU6IFwibm8tc3RvcmVcIixcclxuICB9KTtcclxuICBjb25zdCBwYXJzZWQgPSBhd2FpdCByZWFkSnNvbk9yVGV4dChyZXMpO1xyXG4gIHJldHVybiBlbnN1cmVPazx7IHJlc3VsdHM6IFJlc3VsdERvY1tdOyB0b3RhbDogbnVtYmVyIH0+KFxyXG4gICAgcGFyc2VkLFxyXG4gICAgXCJGZXRjaCBhbmFseXNpcyBoaXN0b3J5XCJcclxuICApO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVsZXRlQW5hbHlzaXNSZXN1bHQoaWQ6IHN0cmluZykge1xyXG4gIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGAke0JBU0VfVVJMfS9hcGkvYW5hbHl6ZS8ke2lkfWAsIHtcclxuICAgIG1ldGhvZDogXCJERUxFVEVcIixcclxuICAgIGhlYWRlcnM6IHsgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIgfSxcclxuICB9KTtcclxuICBjb25zdCBwYXJzZWQgPSBhd2FpdCByZWFkSnNvbk9yVGV4dChyZXMpO1xyXG4gIHJldHVybiBlbnN1cmVPazx7IG1lc3NhZ2U6IHN0cmluZyB9PihwYXJzZWQsIFwiRGVsZXRlIGFuYWx5c2lzIHJlc3VsdFwiKTtcclxufVxyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBTdHJpcGUgY2hlY2tvdXQgKHVuY2hhbmdlZClcclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RhcnRDaGVja291dChlbWFpbDogc3RyaW5nLCBwYWNrYWdlSWQ6IHN0cmluZykge1xyXG4gIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGAke0JBU0VfVVJMfS9hcGkvY2hlY2tvdXQvY3JlYXRlLWNoZWNrb3V0LXNlc3Npb25gLCB7XHJcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgaGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxyXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBlbWFpbCwgcGFja2FnZUlkIH0pLFxyXG4gIH0pO1xyXG4gIGNvbnN0IHsgb2ssIGRhdGEgfSA9IGF3YWl0IHJlYWRKc29uT3JUZXh0KHJlcyk7XHJcbiAgaWYgKCFvaykgdGhyb3cgbmV3IEVycm9yKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiID8gZGF0YSA6IGRhdGE/LmVycm9yIHx8IFwiRmFpbGVkIHRvIHN0YXJ0IGNoZWNrb3V0XCIpO1xyXG4gIGlmICghZGF0YT8udXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJObyBjaGVja291dCBVUkwgcmV0dXJuZWRcIik7XHJcbiAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBkYXRhLnVybDtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHZlcmlmeVNlc3Npb24oc2Vzc2lvbklkOiBzdHJpbmcpIHtcclxuICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChcclxuICAgIGAke0JBU0VfVVJMfS9hcGkvY2hlY2tvdXQvdmVyaWZ5LXNlc3Npb24/c2Vzc2lvbl9pZD0ke2VuY29kZVVSSUNvbXBvbmVudChzZXNzaW9uSWQpfWBcclxuICApO1xyXG4gIGNvbnN0IHBhcnNlZCA9IGF3YWl0IHJlYWRKc29uT3JUZXh0KHJlcyk7XHJcbiAgcmV0dXJuIGVuc3VyZU9rPHsgc3RhdHVzOiBzdHJpbmc7IGVtYWlsPzogc3RyaW5nOyBwYWNrYWdlSWQ/OiBzdHJpbmcgfT4oXHJcbiAgICBwYXJzZWQsXHJcbiAgICBcIlZlcmlmeSBzZXNzaW9uXCJcclxuICApO1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBQdXJjaGFzZVJlc3BvbnNlID0geyBtZXNzYWdlOiBzdHJpbmcgfTtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwdXJjaGFzZVBhY2thZ2UoZW1haWw6IHN0cmluZywgcGFja2FnZUlkOiBzdHJpbmcpIHtcclxuICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgJHtCQVNFX1VSTH0vYXBpL3B1cmNoYXNlYCwge1xyXG4gICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgIGhlYWRlcnM6IHsgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIgfSxcclxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgZW1haWwsIHBhY2thZ2VJZCB9KSxcclxuICB9KTtcclxuICBjb25zdCBwYXJzZWQgPSBhd2FpdCByZWFkSnNvbk9yVGV4dChyZXMpO1xyXG4gIHJldHVybiBlbnN1cmVPazxQdXJjaGFzZVJlc3BvbnNlPihwYXJzZWQsIFwiUHVyY2hhc2UgcGFja2FnZVwiKTtcclxufVxyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBVc2VyL3BhY2thZ2VcclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZXJQYWNrYWdlUmVzcG9uc2Uge1xyXG4gIGhhc0FjY2VzczogYm9vbGVhbjtcclxuICBwYWNrYWdlPzogc3RyaW5nO1xyXG4gIHVwbG9hZHNSZW1haW5pbmc/OiBudW1iZXI7XHJcbiAgZXhwaXJlc0F0Pzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2hlY2tVc2VyUGFja2FnZShlbWFpbDogc3RyaW5nKTogUHJvbWlzZTxVc2VyUGFja2FnZVJlc3BvbnNlPiB7XHJcbiAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goXHJcbiAgICBgJHtCQVNFX1VSTH0vYXBpL3VzZXIvY2hlY2stcGFja2FnZT9lbWFpbD0ke2VuY29kZVVSSUNvbXBvbmVudChlbWFpbCl9YFxyXG4gICk7XHJcbiAgY29uc3QgcGFyc2VkID0gYXdhaXQgcmVhZEpzb25PclRleHQocmVzKTtcclxuICByZXR1cm4gZW5zdXJlT2s8VXNlclBhY2thZ2VSZXNwb25zZT4ocGFyc2VkLCBcIkNoZWNrIHVzZXIgcGFja2FnZVwiKTtcclxufVxyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBDb2FjaCBjaGF0ICsgY29udmVyc2F0aW9ucyAodW5jaGFuZ2VkIGZyb20geW91ciB3b3JraW5nIHNldHVwKVxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbmV4cG9ydCB0eXBlIENvYWNoQ2hhdFJlc3VsdCA9IHsgc3RhdHVzOiBudW1iZXI7IGRhdGE6IGFueSB9O1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvYWNoQ2hhdCh7XHJcbiAgZW1haWwsXHJcbiAgcXVlc3Rpb24sXHJcbiAgbGF0ZXN0Q29udGVudEluZm8sXHJcbiAgY29udmVyc2F0aW9uSWQsXHJcbiAgdGl0bGUsXHJcbn06IHtcclxuICBlbWFpbDogc3RyaW5nO1xyXG4gIHF1ZXN0aW9uOiBzdHJpbmc7XHJcbiAgbGF0ZXN0Q29udGVudEluZm8/OiBzdHJpbmc7XHJcbiAgY29udmVyc2F0aW9uSWQ/OiBzdHJpbmc7XHJcbiAgdGl0bGU/OiBzdHJpbmc7XHJcbn0pOiBQcm9taXNlPENvYWNoQ2hhdFJlc3VsdD4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgJHtCQVNFX1VSTH0vYXBpL2NvYWNoLWNoYXRgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgIGhlYWRlcnM6IHsgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIgfSxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBlbWFpbCwgcXVlc3Rpb24sIGxhdGVzdENvbnRlbnRJbmZvLCBjb252ZXJzYXRpb25JZCwgdGl0bGUgfSksXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBwYXJzZWQgPSBhd2FpdCByZWFkSnNvbk9yVGV4dChyZXMpOyAvLyB7IG9rLCBzdGF0dXMsIGRhdGEgfVxyXG4gICAgcmV0dXJuIHsgc3RhdHVzOiBwYXJzZWQuc3RhdHVzLCBkYXRhOiBwYXJzZWQuZGF0YSB9O1xyXG4gIH0gY2F0Y2gge1xyXG4gICAgcmV0dXJuIHsgc3RhdHVzOiAwLCBkYXRhOiB7IGVycm9yOiBcIk5ldHdvcmsgZXJyb3JcIiB9IH07XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hDb252ZXJzYXRpb24oaWQ6IHN0cmluZyk6IFByb21pc2U8Q29udmVyc2F0aW9uPiB7XHJcbiAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYCR7QkFTRV9VUkx9L2FwaS9jb252ZXJzYXRpb25zLyR7aWR9YCwge1xyXG4gICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgaGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxyXG4gICAgY2FjaGU6IFwibm8tc3RvcmVcIixcclxuICB9KTtcclxuICBjb25zdCBwYXJzZWQgPSBhd2FpdCByZWFkSnNvbk9yVGV4dChyZXMpO1xyXG4gIHJldHVybiBlbnN1cmVPazxDb252ZXJzYXRpb24+KHBhcnNlZCwgXCJGZXRjaCBjb252ZXJzYXRpb25cIik7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWxldGVDb252ZXJzYXRpb24oY29udmVyc2F0aW9uSWQ6IHN0cmluZykge1xyXG4gIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGAke0JBU0VfVVJMfS9hcGkvY29udmVyc2F0aW9ucy8ke2NvbnZlcnNhdGlvbklkfWAsIHtcclxuICAgIG1ldGhvZDogXCJERUxFVEVcIixcclxuICB9KTtcclxuICBjb25zdCBwYXJzZWQgPSBhd2FpdCByZWFkSnNvbk9yVGV4dChyZXMpO1xyXG4gIHJldHVybiBlbnN1cmVPayhwYXJzZWQsIFwiRGVsZXRlIGNvbnZlcnNhdGlvblwiKTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUVtcHR5Q29udmVyc2F0aW9uKGVtYWlsOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZyB8IG51bGw+IHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYCR7QkFTRV9VUkx9L2FwaS9jb252ZXJzYXRpb25zYCwge1xyXG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICBoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgZW1haWwgfSksXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHBhcnNlZCA9IGF3YWl0IHJlYWRKc29uT3JUZXh0KHJlcyk7XHJcbiAgICBjb25zdCBkYXRhID0gZW5zdXJlT2s8eyBfaWQ/OiBzdHJpbmc7IGlkPzogc3RyaW5nIH0+KHBhcnNlZCwgXCJDcmVhdGUgY29udmVyc2F0aW9uXCIpO1xyXG4gICAgcmV0dXJuIGRhdGEuX2lkID8/IGRhdGEuaWQgPz8gbnVsbDtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGNyZWF0aW5nIG5ldyBjb252ZXJzYXRpb246XCIsIGVycm9yKTtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlQ29udmVyc2F0aW9uVGl0bGUoXHJcbiAgY29udmVyc2F0aW9uSWQ6IHN0cmluZyxcclxuICBmaXJzdFVzZXJNZXNzYWdlOiBzdHJpbmdcclxuKSB7XHJcbiAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYCR7QkFTRV9VUkx9L2FwaS9jb252ZXJzYXRpb25zLyR7Y29udmVyc2F0aW9uSWR9L2dlbmVyYXRlLXRpdGxlYCwge1xyXG4gICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgIGhlYWRlcnM6IHsgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIgfSxcclxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgZmlyc3RVc2VyTWVzc2FnZSB9KSxcclxuICAgIGNhY2hlOiBcIm5vLXN0b3JlXCIsXHJcbiAgfSk7XHJcbiAgY29uc3QgcGFyc2VkID0gYXdhaXQgcmVhZEpzb25PclRleHQocmVzKTtcclxuICBjb25zdCBkYXRhID0gZW5zdXJlT2s8eyB0aXRsZTogc3RyaW5nIHwgbnVsbCB9PihwYXJzZWQsIFwiR2VuZXJhdGUgdGl0bGVcIik7XHJcbiAgcmV0dXJuIGRhdGEudGl0bGUgfHwgbnVsbDtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoQ29udmVyc2F0aW9ucyhlbWFpbDogc3RyaW5nKTogUHJvbWlzZTxDb252ZXJzYXRpb25TdW1tYXJ5W10+IHtcclxuICBjb25zdCB1cmwgPSBgJHtCQVNFX1VSTH0vYXBpL2NvbnZlcnNhdGlvbnM/ZW1haWw9JHtlbmNvZGVVUklDb21wb25lbnQoZW1haWwpfSZ0cz0ke0RhdGUubm93KCl9YDtcclxuICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCh1cmwsIHtcclxuICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgIGhlYWRlcnM6IHsgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIgfSxcclxuICAgIGNhY2hlOiBcIm5vLXN0b3JlXCIsXHJcbiAgfSk7XHJcbiAgY29uc3QgcGFyc2VkID0gYXdhaXQgcmVhZEpzb25PclRleHQocmVzKTtcclxuICByZXR1cm4gZW5zdXJlT2s8Q29udmVyc2F0aW9uU3VtbWFyeVtdPihwYXJzZWQsIFwiRmV0Y2ggY29udmVyc2F0aW9uc1wiKTtcclxufVxyXG5cclxuLy8gLS0tLS0tLS0tLSBDaGF0IHR5cGVzIC0tLS0tLS0tLS1cclxuZXhwb3J0IGludGVyZmFjZSBDaGF0TWV0YSB7XHJcbiAgdXNlZENvbnRleHRJZHM/OiBzdHJpbmdbXTtcclxuICByZXF1ZXN0SWQ/OiBzdHJpbmc7XHJcbiAgbGF0ZW5jeU1zPzogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENoYXRNZXNzYWdlIHtcclxuICByb2xlOiBcInVzZXJcIiB8IFwiYXNzaXN0YW50XCI7XHJcbiAgY29udGVudDogc3RyaW5nO1xyXG4gIF9pZD86IHN0cmluZztcclxuICBtZXRhPzogQ2hhdE1ldGE7IC8vIG9wdGlvbmFsIG1ldGEgZm9yIGFzc2lzdGFudCBmb290ZXJcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDaGF0Q29udmVyc2F0aW9uIHtcclxuICBfaWQ6IHN0cmluZztcclxuICB0aXRsZT86IHN0cmluZztcclxuICBtZXNzYWdlczogQ2hhdE1lc3NhZ2VbXTtcclxuICB1cGRhdGVkQXQ/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29hY2hDaGF0UmVzcG9uc2Uge1xyXG4gIGFpOiBzdHJpbmc7XHJcbiAgY29udmVyc2F0aW9uOiBDaGF0Q29udmVyc2F0aW9uO1xyXG4gIHVzZWRDb250ZXh0SWRzPzogc3RyaW5nW107XHJcbiAgcmVxdWVzdElkPzogc3RyaW5nO1xyXG4gIGxhdGVuY3lNcz86IG51bWJlcjtcclxuICAvLyBvcHRpb25hbCwgaWYgeW91IGFkZCBxdW90YSB0byBiYWNrZW5kIGxhdGVyXHJcbiAgcXVvdGE/OiB7IHVzZWQ6IG51bWJlcjsgbGltaXQ6IG51bWJlciB9O1xyXG4gIC8vIGVycm9yIHBheWxvYWRzIGZvciA0eHhcclxuICBlcnJvcj86IHN0cmluZztcclxuICBhY3Rpb24/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29udmVyc2F0aW9uU3VtbWFyeSB7XHJcbiAgX2lkOiBzdHJpbmc7XHJcbiAgdGl0bGU/OiBzdHJpbmc7XHJcbiAgdXBkYXRlZEF0Pzogc3RyaW5nO1xyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29udmVyc2F0aW9uIHtcclxuICBfaWQ6IHN0cmluZztcclxuICB0aXRsZT86IHN0cmluZztcclxuICBtZXNzYWdlczogQ2hhdE1lc3NhZ2VbXTtcclxuICB1cGRhdGVkQXQ/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZW5kRmVlZGJhY2sobWVzc2FnZTogc3RyaW5nLCBlbWFpbD86IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuIH0+IHtcclxuICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgJHtCQVNFX1VSTH0vYXBpL2ZlZWRiYWNrYCwge1xyXG4gICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgIGhlYWRlcnM6IHsgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIgfSxcclxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgbWVzc2FnZSwgZW1haWwgfSksXHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IHBhcnNlZCA9IGF3YWl0IHJlYWRKc29uT3JUZXh0KHJlcyk7XHJcbiAgaWYgKCFwYXJzZWQub2spIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgdHlwZW9mIHBhcnNlZC5kYXRhID09PSBcInN0cmluZ1wiXHJcbiAgICAgICAgPyBwYXJzZWQuZGF0YVxyXG4gICAgICAgIDogcGFyc2VkLmRhdGE/LmVycm9yIHx8IGBGYWlsZWQgdG8gc2VuZCBmZWVkYmFjayAoJHtwYXJzZWQuc3RhdHVzfSlgXHJcbiAgICApO1xyXG4gIH1cclxuICAvLyBiYWNrZW5kIHJldHVybnMgeyBzdWNjZXNzOiB0cnVlIH1cclxuICByZXR1cm4gcGFyc2VkLmRhdGEgYXMgeyBzdWNjZXNzOiBib29sZWFuIH07XHJcbn1cclxuXHJcbi8vIGFkZCB0aGlzIHR5cGUgbmVhciB5b3VyIG90aGVyIGV4cG9ydHNcclxuZXhwb3J0IHR5cGUgQW5hbHl6ZVJlc3BvbnNlID0ge1xyXG4gIG1lc3NhZ2U/OiBzdHJpbmc7XHJcbiAgcmVxdWVzdElkPzogc3RyaW5nO1xyXG4gIGluc2lnaHRzOiBSZXN1bHREb2M7XHJcbiAgZHVyYXRpb25zPzogeyB0b3RhbF9tczogbnVtYmVyOyB2aXNpb25fbXM6IG51bWJlcjsgY2FwdGlvbnNfbXM6IG51bWJlciB9O1xyXG4gIGR1cGxpY2F0ZT86IGJvb2xlYW47XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYW5hbHl6ZUltYWdlTXVsdGlwYXJ0KG9wdHM6IHtcclxuICBmaWxlOiBGaWxlO1xyXG4gIGVtYWlsOiBzdHJpbmc7XHJcbiAgZ29hbD86IFwic3Vic1wiIHwgXCJwcHZcIiB8IFwiY3VzdG9tc1wiO1xyXG4gIGxpbmtCYXNlPzogc3RyaW5nO1xyXG4gIGNhcHRpb25zPzogYm9vbGVhbjsgLy8gZGVmYXVsdCB0cnVlXHJcbiAgb25Qcm9ncmVzcz86IChwY3Q6IG51bWJlcikgPT4gdm9pZDtcclxufSk6IFByb21pc2U8QW5hbHl6ZVJlc3BvbnNlPiB7XHJcbiAgY29uc3QgeyBmaWxlLCBlbWFpbCwgZ29hbCwgbGlua0Jhc2UsIG9uUHJvZ3Jlc3MsIGNhcHRpb25zID0gdHJ1ZSB9ID0gb3B0cztcclxuXHJcbiAgY29uc3QgZm9ybSA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gIGZvcm0uYXBwZW5kKFwiaW1hZ2VcIiwgZmlsZSk7XHJcbiAgZm9ybS5hcHBlbmQoXCJlbWFpbFwiLCBlbWFpbCk7XHJcbiAgaWYgKGdvYWwpIGZvcm0uYXBwZW5kKFwiZ29hbFwiLCBnb2FsKTtcclxuICBpZiAobGlua0Jhc2UpIGZvcm0uYXBwZW5kKFwibGlua0Jhc2VcIiwgbGlua0Jhc2UpO1xyXG5cclxuICAvLyDirIfvuI8gTkVXOiBpbmNsdWRlIGJyb3dzZXIgdGltZXpvbmUgc28gYmFja2VuZCByZXR1cm5zIGxvY2FsIHdpbmRvd3NcclxuICB0cnkge1xyXG4gICAgY29uc3QgdGltZXpvbmUgPSBJbnRsLkRhdGVUaW1lRm9ybWF0KCkucmVzb2x2ZWRPcHRpb25zKCkudGltZVpvbmU7XHJcbiAgICBpZiAodGltZXpvbmUpIGZvcm0uYXBwZW5kKFwidGltZXpvbmVcIiwgdGltZXpvbmUpO1xyXG4gIH0gY2F0Y2gge31cclxuXHJcbiAgY29uc3QgdXJsID0gYCR7QkFTRV9VUkx9L2FwaS9hbmFseXplYCArIChjYXB0aW9ucyA9PT0gZmFsc2UgPyBgP2NhcHRpb25zPWZhbHNlYCA6IFwiXCIpO1xyXG5cclxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICB4aHIub3BlbihcIlBPU1RcIiwgdXJsLCB0cnVlKTtcclxuXHJcbiAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xyXG4gICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgIT09IDQpIHJldHVybjtcclxuICAgICAgaWYgKHhoci5zdGF0dXMgPj0gMjAwICYmIHhoci5zdGF0dXMgPCAzMDApIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgY29uc3QganNvbiA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCkgYXMgQW5hbHl6ZVJlc3BvbnNlO1xyXG4gICAgICAgICAgcmVzb2x2ZShqc29uKTtcclxuICAgICAgICB9IGNhdGNoIHtcclxuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJJbnZhbGlkIEpTT04gZnJvbSBzZXJ2ZXIuXCIpKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGNvbnN0IGVyciA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgICByZWplY3QobmV3IEVycm9yKGVycj8uZXJyb3IgfHwgYFVwbG9hZCBmYWlsZWQgKCR7eGhyLnN0YXR1c30pYCkpO1xyXG4gICAgICAgIH0gY2F0Y2gge1xyXG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgVXBsb2FkIGZhaWxlZCAoJHt4aHIuc3RhdHVzfSlgKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGlmICh4aHIudXBsb2FkICYmIHR5cGVvZiBvblByb2dyZXNzID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgeGhyLnVwbG9hZC5vbnByb2dyZXNzID0gKGV2dCkgPT4ge1xyXG4gICAgICAgIGlmICghZXZ0Lmxlbmd0aENvbXB1dGFibGUpIHJldHVybjtcclxuICAgICAgICBvblByb2dyZXNzKE1hdGgucm91bmQoKGV2dC5sb2FkZWQgLyBldnQudG90YWwpICogMTAwKSk7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgeGhyLm9uZXJyb3IgPSAoKSA9PiByZWplY3QobmV3IEVycm9yKFwiTmV0d29yayBlcnJvclwiKSk7XHJcbiAgICB4aHIuc2VuZChmb3JtKTtcclxuICB9KTtcclxufVxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QW5hbHlzaXNCeUlkKGlkOiBzdHJpbmcpIHtcclxuICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgJHtCQVNFX1VSTH0vYXBpL2FuYWx5emUvJHtpZH1gLCB7IGNhY2hlOiBcIm5vLXN0b3JlXCIgfSk7XHJcbiAgY29uc3QgcGFyc2VkID0gYXdhaXQgcmVhZEpzb25PclRleHQocmVzKTtcclxuICByZXR1cm4gZW5zdXJlT2s8UmVzdWx0RG9jPihwYXJzZWQsIFwiRmV0Y2ggcmVzdWx0IGJ5IGlkXCIpO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlQW5hbHlzaXNCeUlkKGlkOiBzdHJpbmcsIHBhdGNoOiBQYXJ0aWFsPFJlc3VsdERvYz4pOiBQcm9taXNlPFJlc3VsdERvYz4ge1xyXG4gIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGAke0JBU0VfVVJMfS9hcGkvYW5hbHl6ZS8ke2lkfWAsIHtcclxuICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgaGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxyXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkocGF0Y2gpLFxyXG4gIH0pO1xyXG4gIGNvbnN0IHBhcnNlZCA9IGF3YWl0IHJlYWRKc29uT3JUZXh0KHJlcyk7XHJcbiAgcmV0dXJuIGVuc3VyZU9rPFJlc3VsdERvYz4ocGFyc2VkLCBcIlVwZGF0ZSBhbmFseXNpc1wiKTtcclxufSJdLCJuYW1lcyI6WyJCQVNFX1VSTCIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19BUElfVVJMIiwiZ2V0Q2xpZW50RW1haWwiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwicmVhZEpzb25PclRleHQiLCJyZXMiLCJ0ZXh0Iiwib2siLCJzdGF0dXMiLCJkYXRhIiwiSlNPTiIsInBhcnNlIiwiZW5zdXJlT2siLCJyIiwid2hhdCIsIm1zZyIsInN0cmluZ2lmeSIsIkVycm9yIiwiZmV0Y2hBbmFseXNpc0hpc3RvcnkiLCJlbWFpbCIsInBhZ2UiLCJsaW1pdCIsInBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsIlN0cmluZyIsInRzIiwiRGF0ZSIsIm5vdyIsImZldGNoIiwidG9TdHJpbmciLCJtZXRob2QiLCJoZWFkZXJzIiwiY2FjaGUiLCJwYXJzZWQiLCJkZWxldGVBbmFseXNpc1Jlc3VsdCIsImlkIiwic3RhcnRDaGVja291dCIsInBhY2thZ2VJZCIsImJvZHkiLCJlcnJvciIsInVybCIsIndpbmRvdyIsImxvY2F0aW9uIiwiaHJlZiIsInZlcmlmeVNlc3Npb24iLCJzZXNzaW9uSWQiLCJlbmNvZGVVUklDb21wb25lbnQiLCJwdXJjaGFzZVBhY2thZ2UiLCJjaGVja1VzZXJQYWNrYWdlIiwiY29hY2hDaGF0IiwicXVlc3Rpb24iLCJsYXRlc3RDb250ZW50SW5mbyIsImNvbnZlcnNhdGlvbklkIiwidGl0bGUiLCJmZXRjaENvbnZlcnNhdGlvbiIsImRlbGV0ZUNvbnZlcnNhdGlvbiIsImNyZWF0ZUVtcHR5Q29udmVyc2F0aW9uIiwiX2lkIiwiY29uc29sZSIsImdlbmVyYXRlQ29udmVyc2F0aW9uVGl0bGUiLCJmaXJzdFVzZXJNZXNzYWdlIiwiZmV0Y2hDb252ZXJzYXRpb25zIiwic2VuZEZlZWRiYWNrIiwibWVzc2FnZSIsImFuYWx5emVJbWFnZU11bHRpcGFydCIsIm9wdHMiLCJmaWxlIiwiZ29hbCIsImxpbmtCYXNlIiwib25Qcm9ncmVzcyIsImNhcHRpb25zIiwiZm9ybSIsIkZvcm1EYXRhIiwiYXBwZW5kIiwidGltZXpvbmUiLCJJbnRsIiwiRGF0ZVRpbWVGb3JtYXQiLCJyZXNvbHZlZE9wdGlvbnMiLCJ0aW1lWm9uZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsImpzb24iLCJyZXNwb25zZVRleHQiLCJlcnIiLCJ1cGxvYWQiLCJvbnByb2dyZXNzIiwiZXZ0IiwibGVuZ3RoQ29tcHV0YWJsZSIsIk1hdGgiLCJyb3VuZCIsImxvYWRlZCIsInRvdGFsIiwib25lcnJvciIsInNlbmQiLCJnZXRBbmFseXNpc0J5SWQiLCJ1cGRhdGVBbmFseXNpc0J5SWQiLCJwYXRjaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/utils/api.ts\n"));

/***/ })

});