"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/ai-chat/page",{

/***/ "(app-pages-browser)/./src/app/utils/api.ts":
/*!******************************!*\
  !*** ./src/app/utils/api.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeImage: function() { return /* binding */ analyzeImage; },\n/* harmony export */   checkUserPackage: function() { return /* binding */ checkUserPackage; },\n/* harmony export */   coachChat: function() { return /* binding */ coachChat; },\n/* harmony export */   createEmptyConversation: function() { return /* binding */ createEmptyConversation; },\n/* harmony export */   deleteAnalysisResult: function() { return /* binding */ deleteAnalysisResult; },\n/* harmony export */   deleteConversation: function() { return /* binding */ deleteConversation; },\n/* harmony export */   fetchAnalysisHistory: function() { return /* binding */ fetchAnalysisHistory; },\n/* harmony export */   fetchConversation: function() { return /* binding */ fetchConversation; },\n/* harmony export */   fetchConversations: function() { return /* binding */ fetchConversations; },\n/* harmony export */   generateConversationTitle: function() { return /* binding */ generateConversationTitle; },\n/* harmony export */   purchasePackage: function() { return /* binding */ purchasePackage; },\n/* harmony export */   sendFeedback: function() { return /* binding */ sendFeedback; },\n/* harmony export */   startCheckout: function() { return /* binding */ startCheckout; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\nconst BASE_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:5001\";\nconst analyzeImage = async (file, email)=>{\n    const formData = new FormData();\n    formData.append(\"image\", file);\n    formData.append(\"email\", email);\n    try {\n        const response = await fetch(\"\".concat(BASE_URL, \"/api/analyze\"), {\n            method: \"POST\",\n            body: formData\n        });\n        const responseText = await response.text();\n        console.log(\"Analyze Image API Response:\", responseText);\n        if (!response.ok) {\n            throw new Error(\"Failed to analyze image: \".concat(response.status, \" - \").concat(responseText));\n        }\n        return JSON.parse(responseText);\n    } catch (error) {\n        console.error(\"Error in analyzeImage:\", error);\n        throw error;\n    }\n};\nconst fetchAnalysisHistory = async function(currentPage) {\n    let searchTerm = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\", filterPlatform = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"\", email // add email argument\n     = arguments.length > 3 ? arguments[3] : void 0;\n    try {\n        // Build the query string, including email if provided\n        const params = new URLSearchParams();\n        params.append(\"page\", String(currentPage));\n        if (searchTerm) params.append(\"search\", searchTerm);\n        if (filterPlatform) params.append(\"platform\", filterPlatform);\n        if (email) params.append(\"email\", email);\n        const response = await fetch(\"\".concat(BASE_URL, \"/api/analyze?\").concat(params.toString()));\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch history\");\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(\"Error fetching analysis history:\", error);\n        throw error;\n    }\n};\nconst deleteAnalysisResult = async (id)=>{\n    try {\n        console.log(\"Attempting to delete result with ID:\", id);\n        const response = await fetch(\"\".concat(BASE_URL, \"/api/analyze/\").concat(id), {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        const responseText = await response.text();\n        console.log(\"Delete API Response:\", responseText);\n        if (!response.ok) {\n            throw new Error(\"Failed to delete analysis result: \".concat(response.status, \" - \").concat(responseText));\n        }\n        return JSON.parse(responseText);\n    } catch (error) {\n        console.error(\"Error in deleteAnalysisResult:\", error);\n        throw error;\n    }\n};\nconst purchasePackage = async (email, packageId)=>{\n    const response = await fetch(\"\".concat(BASE_URL, \"/api/user/purchase\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            email,\n            packageId\n        })\n    });\n    if (!response.ok) {\n        throw new Error(\"Failed to purchase package\");\n    }\n    return response.json();\n};\nconst checkUserPackage = async (email)=>{\n    const response = await fetch(\"\".concat(BASE_URL, \"/api/user/check-package?email=\").concat(email));\n    if (!response.ok) {\n        throw new Error(\"Failed to check user package\");\n    }\n    return response.json();\n};\nconst startCheckout = async (email, packageId)=>{\n    const response = await fetch(\"\".concat(BASE_URL, \"/api/checkout/create-checkout-session\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            email,\n            packageId\n        })\n    });\n    if (!response.ok) {\n        throw new Error(\"Failed to start checkout session\");\n    }\n    const data = await response.json();\n    window.location.href = data.url;\n};\nconst sendFeedback = async (message, email)=>{\n    try {\n        const res = await fetch(\"\".concat(BASE_URL, \"/api/feedback\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                message,\n                email\n            })\n        });\n        if (!res.ok) {\n            const errorData = await res.json();\n            throw new Error(errorData.error || \"Failed to send feedback\");\n        }\n        return await res.json();\n    } catch (err) {\n        console.error(\"‚ùå sendFeedback error:\", err);\n        throw err;\n    }\n};\nasync function coachChat(param) {\n    let { email, question, latestContentInfo, conversationId, title } = param;\n    const res = await fetch(\"\".concat(BASE_URL, \"/api/coach-chat\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            email,\n            question,\n            latestContentInfo,\n            conversationId,\n            title\n        })\n    });\n    if (!res.ok) throw new Error(\"AI chat failed\");\n    return res.json();\n}\n// Get all conversations for a user (for sidebar/history)\nasync function fetchConversations(email) {\n    const res = await fetch(\"\".concat(BASE_URL, \"/api/conversations?email=\").concat(encodeURIComponent(email), \"&ts=\").concat(Date.now()), {\n        method: \"GET\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        cache: \"no-store\"\n    });\n    if (!res.ok) throw new Error(\"Failed to fetch conversations\");\n    return res.json();\n}\n// Get a single conversation (full messages)\nasync function fetchConversation(conversationId) {\n    const res = await fetch(\"\".concat(BASE_URL, \"/api/conversations/\").concat(conversationId));\n    if (!res.ok) throw new Error(\"Failed to fetch conversation\");\n    return res.json();\n}\n// Delete a conversation\nasync function deleteConversation(conversationId) {\n    const res = await fetch(\"\".concat(BASE_URL, \"/api/conversations/\").concat(conversationId), {\n        method: \"DELETE\"\n    });\n    if (!res.ok) throw new Error(\"Failed to delete conversation\");\n    return res.json();\n}\nasync function generateConversationTitle(conversationId, firstUserMessage) {\n    try {\n        const response = await fetch(\"\".concat(BASE_URL, \"/api/conversations/\").concat(conversationId, \"/generate-title\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                firstUserMessage\n            })\n        });\n        if (!response.ok) throw new Error(\"Failed to generate title\");\n        const data = await response.json();\n        return data.title || null;\n    } catch (error) {\n        console.error(\"Error generating conversation title:\", error);\n        return null;\n    }\n}\nasync function createEmptyConversation(email) {\n    try {\n        const res = await fetch(\"\".concat(BASE_URL, \"/api/conversations\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                email\n            })\n        });\n        if (!res.ok) throw new Error(\"Failed to create conversation\");\n        const data = await res.json();\n        // Support for both _id and id\n        return data._id || data.id || null;\n    } catch (error) {\n        console.error(\"Error creating new conversation:\", error);\n        return null;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/utils/api.ts\n"));

/***/ })

});