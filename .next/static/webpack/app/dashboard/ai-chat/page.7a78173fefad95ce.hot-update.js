"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/ai-chat/page",{

/***/ "(app-pages-browser)/./src/app/utils/api.ts":
/*!******************************!*\
  !*** ./src/app/utils/api.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeImageMultipart: function() { return /* binding */ analyzeImageMultipart; },\n/* harmony export */   checkUserPackage: function() { return /* binding */ checkUserPackage; },\n/* harmony export */   coachChat: function() { return /* binding */ coachChat; },\n/* harmony export */   createEmptyConversation: function() { return /* binding */ createEmptyConversation; },\n/* harmony export */   deleteAnalysisResult: function() { return /* binding */ deleteAnalysisResult; },\n/* harmony export */   deleteConversation: function() { return /* binding */ deleteConversation; },\n/* harmony export */   fetchAnalysisHistory: function() { return /* binding */ fetchAnalysisHistory; },\n/* harmony export */   fetchCoachChatPrompts: function() { return /* binding */ fetchCoachChatPrompts; },\n/* harmony export */   fetchConversation: function() { return /* binding */ fetchConversation; },\n/* harmony export */   fetchConversations: function() { return /* binding */ fetchConversations; },\n/* harmony export */   generateConversationTitle: function() { return /* binding */ generateConversationTitle; },\n/* harmony export */   getAnalysisById: function() { return /* binding */ getAnalysisById; },\n/* harmony export */   purchasePackage: function() { return /* binding */ purchasePackage; },\n/* harmony export */   sendFeedback: function() { return /* binding */ sendFeedback; },\n/* harmony export */   startCheckout: function() { return /* binding */ startCheckout; },\n/* harmony export */   updateAnalysisById: function() { return /* binding */ updateAnalysisById; },\n/* harmony export */   verifySession: function() { return /* binding */ verifySession; }\n/* harmony export */ });\n/* harmony import */ var _app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/app/utils/fetcher */ \"(app-pages-browser)/./src/app/utils/fetcher.ts\");\n// src/app/utils/api.ts\n\n// -------------------------------\n// Small helpers\n// -------------------------------\nasync function readJsonOrText(res) {\n    const text = await res.text();\n    try {\n        return {\n            ok: res.ok,\n            status: res.status,\n            data: JSON.parse(text)\n        };\n    } catch (e) {\n        return {\n            ok: res.ok,\n            status: res.status,\n            data: text\n        };\n    }\n}\nfunction ensureOk(r, what) {\n    if (!r.ok) {\n        const msg = typeof r.data === \"string\" ? r.data : JSON.stringify(r.data, null, 2);\n        throw new Error(\"\".concat(what, \" failed (\").concat(r.status, \") - \").concat(msg));\n    }\n    return r.data;\n}\n// -------------------------------\n/** Analysis history */ async function fetchAnalysisHistory() {\n    let page = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 10;\n    const url = \"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/analyze?page=\").concat(page, \"&limit=\").concat(limit, \"&ts=\").concat(Date.now());\n    const r = await (0,_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.fetchJson)(url, {\n        method: \"GET\",\n        cache: \"no-store\"\n    });\n    if (!r.ok) throw new Error(\"Fetch analysis history failed\");\n    return r.data;\n}\nasync function deleteAnalysisResult(id) {\n    const res = await fetch(\"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/analyze/\").concat(id), {\n        method: \"DELETE\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    });\n    const parsed = await readJsonOrText(res);\n    return ensureOk(parsed, \"Delete analysis result\");\n}\n// -------------------------------\n/** Stripe (unchanged) */ async function startCheckout(packageId) {\n    const res = await fetch(\"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/checkout/create-checkout-session\"), {\n        method: \"POST\",\n        credentials: \"include\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            packageId\n        })\n    });\n    const { ok, data } = await readJsonOrText(res);\n    if (!ok) throw new Error(typeof data === \"string\" ? data : (data === null || data === void 0 ? void 0 : data.error) || \"Failed to start checkout\");\n    if (!(data === null || data === void 0 ? void 0 : data.url)) throw new Error(\"No checkout URL returned\");\n    window.location.href = data.url;\n}\nasync function verifySession(sessionId) {\n    const res = await fetch(\"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/checkout/verify-session?session_id=\").concat(encodeURIComponent(sessionId)));\n    const parsed = await readJsonOrText(res);\n    return ensureOk(parsed, \"Verify session\");\n}\nasync function purchasePackage(packageId) {\n    const res = await fetch(\"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/user/purchase\"), {\n        method: \"POST\",\n        credentials: \"include\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            packageId\n        })\n    });\n    const parsed = await readJsonOrText(res);\n    return ensureOk(parsed, \"Purchase package\");\n}\nasync function checkUserPackage() {\n    const r = await (0,_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.fetchJson)(\"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/user/check-package\"), {\n        method: \"GET\"\n    });\n    if (!r.ok) throw new Error(\"Check user package failed\");\n    return r.data;\n}\n// -------------------------------\n/** Coach chat + conversations */ async function coachChat(param) {\n    let { question, latestContentInfo, conversationId, title } = param;\n    try {\n        const res = await fetch(\"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/coach-chat\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            credentials: \"include\",\n            body: JSON.stringify({\n                question,\n                latestContentInfo,\n                conversationId,\n                title\n            })\n        });\n        const parsed = await readJsonOrText(res);\n        if (res.status === 200) return {\n            status: 200,\n            data: parsed.data\n        };\n        if (res.status === 402) return {\n            status: 402,\n            data: parsed.data\n        };\n        if (res.status === 429) return {\n            status: 429,\n            data: parsed.data\n        };\n        return {\n            status: res.status,\n            data: parsed.data\n        };\n    } catch (e) {\n        return {\n            status: 0,\n            data: {\n                error: \"Network error\"\n            }\n        };\n    }\n}\nasync function fetchConversation(id) {\n    const res = await fetch(\"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/conversations/\").concat(id), {\n        method: \"GET\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        cache: \"no-store\"\n    });\n    const parsed = await readJsonOrText(res);\n    return ensureOk(parsed, \"Fetch conversation\");\n}\nasync function deleteConversation(conversationId) {\n    const res = await fetch(\"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/conversations/\").concat(conversationId), {\n        method: \"DELETE\"\n    });\n    const parsed = await readJsonOrText(res);\n    return ensureOk(parsed, \"Delete conversation\");\n}\nasync function createEmptyConversation() {\n    try {\n        const res = await fetch(\"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/conversations\"), {\n            method: \"POST\",\n            credentials: \"include\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({})\n        });\n        const parsed = await readJsonOrText(res);\n        const data = ensureOk(parsed, \"Create conversation\");\n        var _data__id, _ref;\n        return (_ref = (_data__id = data._id) !== null && _data__id !== void 0 ? _data__id : data.id) !== null && _ref !== void 0 ? _ref : null;\n    } catch (error) {\n        console.error(\"Error creating new conversation:\", error);\n        return null;\n    }\n}\nasync function generateConversationTitle(conversationId, firstUserMessage) {\n    const res = await fetch(\"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/conversations/\").concat(conversationId, \"/generate-title\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            firstUserMessage\n        }),\n        cache: \"no-store\"\n    });\n    const parsed = await readJsonOrText(res);\n    const data = ensureOk(parsed, \"Generate title\");\n    return data.title || null;\n}\nasync function fetchConversations() {\n    const url = \"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/conversations?ts=\").concat(Date.now());\n    const r = await (0,_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.fetchJson)(url, {\n        method: \"GET\",\n        cache: \"no-store\"\n    });\n    if (!r.ok) throw new Error(\"Fetch conversations failed\");\n    return r.data;\n}\n// -------------------------------\n/** Feedback */ async function sendFeedback(message) {\n    const res = await fetch(\"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/feedback\"), {\n        method: \"POST\",\n        credentials: \"include\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            message\n        })\n    });\n    const parsed = await readJsonOrText(res);\n    if (!parsed.ok) {\n        var _parsed_data;\n        throw new Error(typeof parsed.data === \"string\" ? parsed.data : ((_parsed_data = parsed.data) === null || _parsed_data === void 0 ? void 0 : _parsed_data.error) || \"Failed to send feedback (\".concat(parsed.status, \")\"));\n    }\n    return parsed.data;\n}\nfunction analyzeImageMultipart(opts) {\n    const { file, goal, linkBase, onProgress, captions = true } = opts;\n    const form = new FormData();\n    form.append(\"image\", file);\n    if (goal) form.append(\"goal\", goal);\n    if (linkBase) form.append(\"linkBase\", linkBase);\n    // Include browser timezone so backend returns local windows\n    try {\n        const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n        if (timezone) form.append(\"timezone\", timezone);\n    } catch (e) {}\n    const url = \"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/analyze\") + (captions === false ? \"?captions=false\" : \"\");\n    return new Promise((resolve, reject)=>{\n        const xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", url, true);\n        xhr.withCredentials = true;\n        xhr.onreadystatechange = ()=>{\n            if (xhr.readyState !== 4) return;\n            if (xhr.status >= 200 && xhr.status < 300) {\n                try {\n                    const json = JSON.parse(xhr.responseText);\n                    resolve(json);\n                } catch (e) {\n                    reject(new Error(\"Invalid JSON from server.\"));\n                }\n            } else {\n                try {\n                    const err = JSON.parse(xhr.responseText);\n                    reject(new Error((err === null || err === void 0 ? void 0 : err.error) || \"Upload failed (\".concat(xhr.status, \")\")));\n                } catch (e) {\n                    reject(new Error(\"Upload failed (\".concat(xhr.status, \")\")));\n                }\n            }\n        };\n        if (xhr.upload && typeof onProgress === \"function\") {\n            xhr.upload.onprogress = (evt)=>{\n                if (!evt.lengthComputable) return;\n                onProgress(Math.round(evt.loaded / evt.total * 100));\n            };\n        }\n        xhr.onerror = ()=>reject(new Error(\"Network error\"));\n        xhr.send(form);\n    });\n}\nasync function getAnalysisById(id) {\n    const res = await fetch(\"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/analyze/\").concat(id), {\n        cache: \"no-store\"\n    });\n    const parsed = await readJsonOrText(res);\n    return ensureOk(parsed, \"Fetch result by id\");\n}\nasync function updateAnalysisById(id, patch) {\n    const res = await fetch(\"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/analyze/\").concat(id), {\n        method: \"PATCH\",\n        credentials: \"include\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(patch)\n    });\n    const parsed = await readJsonOrText(res);\n    return ensureOk(parsed, \"Update analysis\");\n}\n// --- Quick Prompts API ---\nasync function fetchCoachChatPrompts() {\n    const url = \"\".concat(_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.BASE_URL, \"/api/coach-chat/prompts?ts=\").concat(Date.now());\n    const r = await (0,_app_utils_fetcher__WEBPACK_IMPORTED_MODULE_0__.fetchJson)(url, {\n        method: \"GET\",\n        cache: \"no-store\"\n    });\n    if (!r.ok) throw new Error(\"Fetch coach prompts failed\");\n    return r.data;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/utils/api.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/utils/fetcher.ts":
/*!**********************************!*\
  !*** ./src/app/utils/fetcher.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BASE_URL: function() { return /* binding */ BASE_URL; },\n/* harmony export */   fetchJson: function() { return /* binding */ fetchJson; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n// src/app/utils/fetcher.ts\nconst BASE_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:5001\";\nasync function fetchJson(input) {\n    let init = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const res = await fetch(input, {\n        ...init,\n        credentials: \"include\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...init.headers || {}\n        }\n    });\n    const text = await res.text();\n    let data = null;\n    try {\n        data = text ? JSON.parse(text) : null;\n    } catch (e) {\n        data = text;\n    }\n    if (res.status === 401) {\n        // optional: client-side redirect can be handled by caller\n        const err = new Error(\"Unauthorized\");\n        err.status = 401;\n        err.data = data;\n        throw err;\n    }\n    return {\n        ok: res.ok,\n        status: res.status,\n        data\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvdXRpbHMvZmV0Y2hlci50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSwyQkFBMkI7QUFDcEIsTUFBTUEsV0FBV0MsT0FBT0EsQ0FBQ0MsR0FBRyxDQUFDQyxtQkFBbUIsSUFBSSx3QkFBd0I7QUFFNUUsZUFBZUMsVUFBVUMsS0FBYTtRQUFFQyxPQUFBQSxpRUFBb0IsQ0FBQztJQUNsRSxNQUFNQyxNQUFNLE1BQU1DLE1BQU1ILE9BQU87UUFDN0IsR0FBR0MsSUFBSTtRQUNQRyxhQUFhO1FBQ2JDLFNBQVM7WUFDUCxnQkFBZ0I7WUFDaEIsR0FBSUosS0FBS0ksT0FBTyxJQUFJLENBQUMsQ0FBQztRQUN4QjtJQUNGO0lBQ0EsTUFBTUMsT0FBTyxNQUFNSixJQUFJSSxJQUFJO0lBQzNCLElBQUlDLE9BQVk7SUFDaEIsSUFBSTtRQUFFQSxPQUFPRCxPQUFPRSxLQUFLQyxLQUFLLENBQUNILFFBQVE7SUFBTSxFQUFFLFVBQU07UUFBRUMsT0FBT0Q7SUFBTTtJQUNwRSxJQUFJSixJQUFJUSxNQUFNLEtBQUssS0FBSztRQUN0QiwwREFBMEQ7UUFDMUQsTUFBTUMsTUFBVyxJQUFJQyxNQUFNO1FBQzNCRCxJQUFJRCxNQUFNLEdBQUc7UUFDYkMsSUFBSUosSUFBSSxHQUFHQTtRQUNYLE1BQU1JO0lBQ1I7SUFDQSxPQUFPO1FBQUVFLElBQUlYLElBQUlXLEVBQUU7UUFBRUgsUUFBUVIsSUFBSVEsTUFBTTtRQUFFSDtJQUFLO0FBQ2hEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9hcHAvdXRpbHMvZmV0Y2hlci50cz9lOTJiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9hcHAvdXRpbHMvZmV0Y2hlci50c1xuZXhwb3J0IGNvbnN0IEJBU0VfVVJMID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQVBJX1VSTCB8fCBcImh0dHA6Ly9sb2NhbGhvc3Q6NTAwMVwiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hKc29uKGlucHV0OiBzdHJpbmcsIGluaXQ6IFJlcXVlc3RJbml0ID0ge30pIHtcbiAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goaW5wdXQsIHtcbiAgICAuLi5pbml0LFxuICAgIGNyZWRlbnRpYWxzOiBcImluY2x1ZGVcIixcbiAgICBoZWFkZXJzOiB7XG4gICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgIC4uLihpbml0LmhlYWRlcnMgfHwge30pLFxuICAgIH0sXG4gIH0pO1xuICBjb25zdCB0ZXh0ID0gYXdhaXQgcmVzLnRleHQoKTtcbiAgbGV0IGRhdGE6IGFueSA9IG51bGw7XG4gIHRyeSB7IGRhdGEgPSB0ZXh0ID8gSlNPTi5wYXJzZSh0ZXh0KSA6IG51bGw7IH0gY2F0Y2ggeyBkYXRhID0gdGV4dDsgfVxuICBpZiAocmVzLnN0YXR1cyA9PT0gNDAxKSB7XG4gICAgLy8gb3B0aW9uYWw6IGNsaWVudC1zaWRlIHJlZGlyZWN0IGNhbiBiZSBoYW5kbGVkIGJ5IGNhbGxlclxuICAgIGNvbnN0IGVycjogYW55ID0gbmV3IEVycm9yKFwiVW5hdXRob3JpemVkXCIpO1xuICAgIGVyci5zdGF0dXMgPSA0MDE7XG4gICAgZXJyLmRhdGEgPSBkYXRhO1xuICAgIHRocm93IGVycjtcbiAgfVxuICByZXR1cm4geyBvazogcmVzLm9rLCBzdGF0dXM6IHJlcy5zdGF0dXMsIGRhdGEgfTtcbn1cblxuIl0sIm5hbWVzIjpbIkJBU0VfVVJMIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0FQSV9VUkwiLCJmZXRjaEpzb24iLCJpbnB1dCIsImluaXQiLCJyZXMiLCJmZXRjaCIsImNyZWRlbnRpYWxzIiwiaGVhZGVycyIsInRleHQiLCJkYXRhIiwiSlNPTiIsInBhcnNlIiwic3RhdHVzIiwiZXJyIiwiRXJyb3IiLCJvayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/utils/fetcher.ts\n"));

/***/ })

});